object TecSyntaxManager
  left = 360
  top = 136
  object SyntAnal55: TLibSyntAnalyzer
    Formats = <    
      item
        DisplayName = 'Default'
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        VertAlignment = vaTop
        FormatType = ftCustomFont
      end    
      item
        DisplayName = 'Symbol'
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end    
      item
        DisplayName = 'Number'
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end    
      item
        DisplayName = 'String'
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
      end    
      item
        DisplayName = 'Identifier'
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
      end    
      item
        DisplayName = 'Reserved word'
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end    
      item
        DisplayName = 'Comment'
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end    
      item
        DisplayName = 'Preprocessor'
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
      end    
      item
        DisplayName = 'Current block'
        Font.CharSet = RUSSIAN_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BgColor = 13369046
        FormatType = ftColor
        BorderTypeLeft = blSolid
        BorderColorLeft = clGray
        BorderTypeTop = blSolid
        BorderColorTop = clGray
        BorderTypeRight = blSolid
        BorderColorRight = clGray
        BorderTypeBottom = blSolid
        BorderColorBottom = clGray
      end    
      item
        DisplayName = 'Asm BG'
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        BgColor = clMoneyGreen
        FormatType = ftBackGround
      end>
    TokenRules = <    
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '"(\\"|\\\\|.)*?("|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Id keyword'
        StyleName = 'Reserved word'
        TokenType = 7
        Expression = '\b(catch|else|for|if|switch|while)\b'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Id'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Hex'
        StyleName = 'Number'
        TokenType = 5
        Expression = '0x[\da-f]*'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 5
        Expression = '(\d+ \.)? \d+ e [\+\-]? \d+ |  \d+ \. \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+L?'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Preprocessor'
        StyleName = 'Preprocessor'
        TokenType = 6
        Expression = '\#\s*\w+'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Comment 1'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)/\*.*?(\*/|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Comment 2'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '//.*'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Single symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[\{\}\(\)\[\],;:]'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/\+\-\*=<>&/\|\^\.!\\\?%]+'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Char'
        StyleName = 'String'
        TokenType = 4
        Expression = '''.*?(''|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <    
      item
        DisplayName = 'keywords'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <        
          item
            TagList.Strings = (
              'asm'
              '_asm'
              '__asm'
              'auto'
              '__automated'
              'bool'
              'break'
              'case'
              'catch'
              'cdecl'
              '_cdecl'
              '__cdecl'
              'char'
              'class'
              '__classid'
              '__closure'
              'const'
              'continue'
              '__declspec'
              'default'
              'delete'
              '__dispid'
              'do'
              'double'
              'else'
              'enum'
              '__except'
              'explicit'
              'export'
              '_export'
              '__export'
              'extern'
              'false'
              '_fastcall'
              '__fastcall'
              '__finally'
              'float'
              'for'
              'friend'
              'goto'
              'if'
              '_import'
              '__import'
              'inline'
              '__inline'
              'int'
              '__int64'
              'long'
              '__msfastcall'
              '__msreturn'
              'mutable'
              'new'
              'operator'
              'pascal'
              '_pascal'
              '__pascal'
              'private'
              '__property'
              'protected'
              'public'
              '__published'
              'register'
              'return'
              'short'
              'signed'
              'sizeof'
              'static'
              '_stdcall'
              '__stdcall'
              'struct'
              'switch'
              'this'
              'throw'
              'true'
              'try'
              '__try'
              'typedef'
              'typeid'
              'typename'
              'union'
              'unsigned'
              'uuid'
              '__uuidof'
              'virtual'
              'void'
              'volatile'
              'wchar_t'
              'while'
            )
            TokenTypes = 4
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'func'
        ConditionList = <        
          item
            TagList.Strings = (
              '{'
            )
            TokenTypes = 8
          end        
          item
            CondType = tcSkip
            TokenTypes = 2
          end        
          item
            TagList.Strings = (
              ')'
            )
            TokenTypes = 8
          end        
          item
            CondType = tcSkip
          end        
          item
            TagList.Strings = (
              '('
            )
            TokenTypes = 8
          end        
          item
            CondType = tcSkip
            TokenTypes = 2
          end        
          item
            TokenTypes = 4
          end        
          item
            CondType = tcSkip
            TokenTypes = 2
          end        
          item
            TokenTypes = 4
          end>
        BlockEnd = '}'
        NotCollapsed = True
        NameFmt = '%sz-1'
        RefToCondEnd = True
        HighlightPos = cpBound
        NoEndRule = True
        TreeItemImage = 5
        IgnoreAsParent = False
        AutoCloseText = '}'#13#10
      end    
      item
        DisplayName = 'func *'
        ConditionList = <        
          item
            TagList.Strings = (
              '{'
            )
            TokenTypes = 8
          end        
          item
            CondType = tcSkip
            TokenTypes = 2
          end        
          item
            TagList.Strings = (
              ')'
            )
            TokenTypes = 8
          end        
          item
            CondType = tcSkip
          end        
          item
            TagList.Strings = (
              '('
            )
            TokenTypes = 8
          end        
          item
            TokenTypes = 4
          end        
          item
            TagList.Strings = (
              '*'
            )
            TokenTypes = 8
          end        
          item
            TokenTypes = 4
          end>
        NotCollapsed = True
        NameFmt = '%s-2'
        RefToCondEnd = True
        HighlightPos = cpAny
        NoEndRule = True
        TreeItemImage = 5
        IgnoreAsParent = False
      end    
      item
        DisplayName = '{'
        StyleName = 'Current block'
        ConditionList = <        
          item
            TagList.Strings = (
              '{'
            )
            TokenTypes = 8
          end>
        BlockEnd = '}'
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        DrawStaple = True
        CollapseFmt = '{ ... }'
        IgnoreAsParent = False
        AutoCloseMode = acmCloseNearest
        AutoCloseText = '}'
      end    
      item
        DisplayName = '}'
        BlockType = btRangeEnd
        ConditionList = <        
          item
            TagList.Strings = (
              '}'
            )
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'Block comment'
        BlockName = 'Block comment'
        NotParent = True
        AlwaysEnabled = True
        ConditionList = <        
          item
            TokenTypes = 2
          end>
        BlockEnd = 'Block comment end'
        DisplayInTree = False
        HighlightPos = cpBound
        CollapseFmt = '{ ... }'
        GrammaRuleName = 'comments'
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'Block comment end'
        BlockName = 'Block comment'
        BlockType = btRangeEnd
        ConditionList = <        
          item
            CondType = tcNotEqual
            TokenTypes = 2
            IgnoreCase = True
          end>
        BlockOffset = 1
        HighlightPos = cpBound
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'define'
        ConditionList = <        
          item
            TagList.Strings = (
              '\#\s*define'
            )
            CondType = tcMask
            TokenTypes = 576
          end>
        NameFmt = '%s0 %s-1'
        HighlightPos = cpAny
        NoEndRule = True
        TreeItemImage = 7
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'struct'
        ConditionList = <        
          item
            TagList.Strings = (
              '{'
            )
            TokenTypes = 8
          end        
          item
            TokenTypes = 4
          end        
          item
            TagList.Strings = (
              'struct'
            )
            TokenTypes = 4
          end>
        NameFmt = '%s0 %s-1'
        HighlightPos = cpAny
        NoEndRule = True
        TreeItemImage = 4
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <    
      item
        DisplayName = 'asm-string'
        StyleName = 'Asm BG'
        StartExpression = '\#asm\s*\(\s*"'
        EndExpression = '"\)'
        SyntAnalyzer = SyntAnalyzer13
      end    
      item
        DisplayName = 'asm-endasm'
        Enabled = False
        StyleName = 'Preprocessor'
        StartExpression = '\#asm'
        EndExpression = '\#endasm'
        SyntAnalyzer = SyntAnalyzer13
      end>
    SampleText.Strings = (
      '/* Test */'
      '#define sum(a, b) a+b '
      '#asm (" mov ax, F0h ")'
      ''
      'void stdcall Init(void) {'
      '  TestModDeinit(B64UTIL);'
      '}'
      ''
      '    char* Small(int a) {'
      '    }'
      '     '
      'void Test(char *Sender)'
      '{'
      '  int Number = 10;  // View integer number style'
      '  double F = 1e2 + 0.123e+2;  // View float number style'
      '  Caption = "Number is " + IntToStr(Number); // View string style'
      '  Number += 0x1FA7; // View HEX style'
      '  char c = ''D'';'
      '  for (i=0; i<5; i++) {'
      '  } '
      '  if (c==''A'') {'
      '    return;'
      '  }'
      '}'
      ''
      'typedef struct HashTab {'
      '   int Name;'
      '}'
    )
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Id'
      'Symbol'
      'String'
      'Number'
      'Preprocessor'
      'Id keyword'
    )
    Extentions = 'c h ch'
    LexerName = 'C'
    Notes.Strings = (
      'Heavily redone by Alexey (SynWrite)'
    )
    LineComment = '//'
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal78: TLibSyntAnalyzer
    Formats = <    
      item
        DisplayName = 'Default'
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        FormatType = ftCustomFont
      end    
      item
        DisplayName = 'Symbol'
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end    
      item
        DisplayName = 'Number'
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end    
      item
        DisplayName = 'String'
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
      end    
      item
        DisplayName = 'Id'
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
      end    
      item
        DisplayName = 'Id keyword'
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end    
      item
        DisplayName = 'Comment'
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end    
      item
        DisplayName = 'Preprocessor'
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
      end    
      item
        DisplayName = 'Current block BG'
        Font.CharSet = RUSSIAN_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BgColor = 13369046
        FormatType = ftBackGround
        BorderTypeLeft = blSolid
        BorderColorLeft = clGray
        BorderTypeTop = blSolid
        BorderColorTop = clGray
        BorderTypeRight = blSolid
        BorderColorRight = clGray
        BorderTypeBottom = blSolid
        BorderColorBottom = clGray
      end    
      item
        DisplayName = 'Asm BG'
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        BgColor = 14938312
        FormatType = ftBackGround
      end    
      item
        DisplayName = 'Id in angles'
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
      end>
    TokenRules = <    
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '"(\\"|\\\\|.)*?("|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Id keyword'
        StyleName = 'Id keyword'
        TokenType = 7
        Expression = '\b(catch|else|for|if|switch|while)\b'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Id'
        StyleName = 'Id'
        TokenType = 2
        Expression = '\~?[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Hex'
        StyleName = 'Number'
        TokenType = 5
        Expression = '0x[\da-f]+'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 5
        Expression = '(\d+ \.)? \d+ e [\+\-]? \d+ |  \d+ \. \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+L?'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Preprocessor'
        StyleName = 'Preprocessor'
        TokenType = 6
        Expression = '\#\s*\w+'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Comment 1'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)/\*.*?(\*/|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Comment 2'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '//.*'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Id <name>'
        StyleName = 'Id in angles'
        TokenType = 2
        Expression = '<\w+>'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Symbol { }'
        StyleName = 'Symbol'
        TokenType = 8
        Expression = '[\{\}]'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Symbol ::'
        StyleName = 'Symbol'
        TokenType = 9
        Expression = ':: | \->'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Symbol ( )'
        StyleName = 'Symbol'
        TokenType = 10
        Expression = '[\(\)]'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/\+\-\*=<>&/\|\^\.!\?%\\:]'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Symbol single'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[\[\],;]'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Char'
        StyleName = 'String'
        TokenType = 4
        Expression = '''.*?(''|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <    
      item
        DisplayName = 'keywords'
        StyleName = 'Id keyword'
        BlockType = btTagDetect
        ConditionList = <        
          item
            TagList.Strings = (
              'asm'
              '_asm'
              '__asm'
              'auto'
              '__automated'
              'bool'
              'break'
              'case'
              'catch'
              'cdecl'
              '_cdecl'
              '__cdecl'
              'char'
              'class'
              '__classid'
              '__closure'
              'const'
              'continue'
              '__declspec'
              'default'
              'delete'
              '__dispid'
              'do'
              'double'
              'else'
              'enum'
              '__except'
              'explicit'
              'export'
              '_export'
              '__export'
              'extern'
              'false'
              '_fastcall'
              '__fastcall'
              '__finally'
              'float'
              'for'
              'friend'
              'goto'
              'if'
              '_import'
              '__import'
              'inline'
              '__inline'
              'int'
              '__int64'
              'long'
              '__msfastcall'
              '__msreturn'
              'mutable'
              'namespace'
              'new'
              'operator'
              'pascal'
              '_pascal'
              '__pascal'
              'private'
              '__property'
              'protected'
              'public'
              '__published'
              'register'
              'return'
              'short'
              'signed'
              'sizeof'
              'size_t'
              'static'
              '_stdcall'
              '__stdcall'
              'struct'
              'switch'
              'this'
              'throw'
              'true'
              'try'
              '__try'
              'typedef'
              'typeid'
              'typename'
              'union'
              'unsigned'
              'uuid'
              '__uuidof'
              'virtual'
              'void'
              'volatile'
              'wchar_t'
              'while'
            )
            TokenTypes = 4
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'class'
        ConditionList = <        
          item
            TagList.Strings = (
              '{'
            )
            TokenTypes = 256
          end        
          item
            CondType = tcSkip
            TokenTypes = 62
          end        
          item
            TagList.Strings = (
              'class'
            )
            TokenTypes = 4
          end>
        BlockEnd = '}'
        NameFmt = 'class %s-1'
        RefToCondEnd = True
        HighlightPos = cpAny
        CancelNextRules = True
        TreeItemImage = 1
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'func :: ::'
        ConditionList = <        
          item
            TagList.Strings = (
              ':'
              '{'
            )
            TokenTypes = 264
          end        
          item
            CondType = tcSkip
            TokenTypes = 4
          end        
          item
            TagList.Strings = (
              ')'
            )
            TokenTypes = 1024
          end        
          item
            CondType = tcSkip
            TokenTypes = 62
          end        
          item
            TagList.Strings = (
              '('
            )
            TokenTypes = 1024
          end        
          item
            TokenTypes = 4
          end        
          item
            TokenTypes = 512
          end        
          item
            TokenTypes = 4
          end        
          item
            TokenTypes = 512
          end        
          item
            TokenTypes = 4
          end>
        BlockEnd = '}'
        NameFmt = '%s-4'
        GroupFmt = '%s0\%s-2'
        RefToCondEnd = True
        HighlightPos = cpAny
        CancelNextRules = True
        CollapseFmt = '%sz0...'
        TreeItemImage = 5
        TreeGroupImage = 1
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'func ::'
        ConditionList = <        
          item
            TagList.Strings = (
              ':'
              '{'
            )
            TokenTypes = 264
          end        
          item
            CondType = tcSkip
            TokenTypes = 4
          end        
          item
            TagList.Strings = (
              ')'
            )
            TokenTypes = 1024
          end        
          item
            CondType = tcSkip
            TokenTypes = 62
          end        
          item
            TagList.Strings = (
              '('
            )
            TokenTypes = 1024
          end        
          item
            TokenTypes = 4
          end        
          item
            TokenTypes = 512
          end        
          item
            TokenTypes = 4
          end>
        BlockEnd = '}'
        NameFmt = '%s-2'
        GroupFmt = '%s0'
        RefToCondEnd = True
        HighlightPos = cpBound
        CancelNextRules = True
        CollapseFmt = '%sz0...'
        TreeItemImage = 5
        TreeGroupImage = 1
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'func'
        ConditionList = <        
          item
            TagList.Strings = (
              '{'
            )
            TokenTypes = 256
          end        
          item
            CondType = tcSkip
            TokenTypes = 4
          end        
          item
            TagList.Strings = (
              ')'
            )
            TokenTypes = 1024
          end        
          item
            CondType = tcSkip
            TokenTypes = 62
          end        
          item
            TagList.Strings = (
              '('
            )
            TokenTypes = 1024
          end        
          item
            CondType = tcSkip
            TokenTypes = 2
          end        
          item
            TokenTypes = 4
          end        
          item
            CondType = tcSkip
            TokenTypes = 10
          end        
          item
            TokenTypes = 4
          end>
        BlockEnd = '}'
        NameFmt = '%sz-1'
        RefToCondEnd = True
        HighlightPos = cpBound
        CancelNextRules = True
        CollapseFmt = '%sz-1...'
        TreeItemImage = 5
        IgnoreAsParent = False
      end    
      item
        DisplayName = '{'
        StyleName = 'Current block BG'
        ConditionList = <        
          item
            TagList.Strings = (
              '{'
            )
            TokenTypes = 256
          end>
        BlockEnd = '}'
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        DrawStaple = True
        CollapseFmt = '{ ... %ez0'
        IgnoreAsParent = False
        AutoCloseText = '}'
      end    
      item
        DisplayName = '}'
        BlockType = btRangeEnd
        ConditionList = <        
          item
            TagList.Strings = (
              '}'
            )
            TokenTypes = 256
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'struct'
        ConditionList = <        
          item
            TokenTypes = 4
          end        
          item
            TagList.Strings = (
              '}'
            )
            TokenTypes = 256
          end        
          item
            CondType = tcSkip
            TokenTypes = 62
          end        
          item
            TagList.Strings = (
              '{'
            )
            TokenTypes = 256
          end        
          item
            CondType = tcSkip
            TokenTypes = 4
          end        
          item
            TagList.Strings = (
              'struct'
            )
            TokenTypes = 4
          end        
          item
            TagList.Strings = (
              'typedef'
            )
            TokenTypes = 4
          end>
        NameFmt = '%s[}]'
        HighlightPos = cpAny
        NoEndRule = True
        TreeItemImage = 4
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'Block comment'
        BlockName = 'Block comment'
        NotParent = True
        AlwaysEnabled = True
        ConditionList = <        
          item
            TokenTypes = 2
          end>
        BlockEnd = 'Block comment end'
        DisplayInTree = False
        HighlightPos = cpBound
        CollapseFmt = '/* ... */'
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'Block comment end'
        BlockName = 'Block comment'
        StrictParent = True
        AlwaysEnabled = True
        BlockType = btRangeEnd
        ConditionList = <        
          item
            CondType = tcNotEqual
            TokenTypes = 2
          end>
        BlockOffset = 1
        HighlightPos = cpBound
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <    
      item
        DisplayName = 'asm_string'
        Enabled = False
        StyleName = 'Asm BG'
        StartExpression = '\#asm\s*\(\s*"'
        EndExpression = '"\)'
        SyntAnalyzer = SyntAnalyzer13
        IncludeBounds = True
      end>
    SampleText.Strings = (
      '/* Test */'
      '#define max(a, b) ((a > b) ? a : b)'
      '#asm(" pop ax ");'
      'strcpy(b, "text\"text");'
      'double F = 1e2 + 0.12e+2 + 0xAF;'
      'name = name<CName>'
      ''
      'Id Template::getTemplate(const string &id) const { '
      '  return id;'
      '}'
      ''
      'void CNested1::CMonitor(MonitorIT* part) {'
      '}'
      ''
      'void CNested2::CMonitor::connectMonitorIT(MonitorIT* part) {'
      '  return this;'
      '}'
      ''
      'floatFlowInterface* CNested2::CMonitor::getItsFloatFlowInterface() {'
      '  return this;'
      '}'
      ''
      ''
      'class CName1 {'
      '}'
      ' '
      'class CName2 : public NameB {'
      '    const int tot;'
      '    unsigned long fib(unsigned long n) {'
      '        return n < 2 ? n : fib(n - 1) + fib(n - 2);'
      '    }'
      '}'
      '      '
      'void __fastcall CForm->Button1Click(Sender: TObject) {'
      '  //Test'
      '}'
      ''
      'void main(int argc; char* argv) {'
      '  //Test'
      '}'
      ''
      'typedef struct'
      '{'
      #9'void* FieldValue;'
      #9'int flags;'
      '} Struct1;'
    )
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Id'
      'Symbol'
      'String'
      'Number'
      'Preprocessor'
      'Id keyword'
      'Symbol {}'
      'Symbol ::'
      'Symbol ()'
    )
    Extentions = 'c cpp cxx h hpp hxx inl cc'
    LexerName = 'C++'
    Notes.Strings = (
      'Redone: Alex (SynWrite)'
    )
    LineComment = '//'
    Charset = DEFAULT_CHARSET
  end
  object SyntAnalyzer13: TLibSyntAnalyzer
    Formats = <    
      item
        DisplayName = 'Default'
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        FormatType = ftCustomFont
      end    
      item
        DisplayName = 'Comment'
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end    
      item
        DisplayName = 'Id'
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
      end    
      item
        DisplayName = 'Id std'
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier New'
      end    
      item
        DisplayName = 'Number'
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end    
      item
        DisplayName = 'Label'
        Font.Color = clOlive
        Font.Height = -13
        Font.Name = 'Courier New'
      end    
      item
        DisplayName = 'Registers'
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
      end    
      item
        DisplayName = 'String'
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
      end    
      item
        DisplayName = 'Symbol'
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end>
    TokenRules = <    
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = ';.*'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Labels'
        StyleName = 'Label'
        Expression = '@+\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Hex'
        StyleName = 'Number'
        TokenType = 5
        Expression = '[\da-f]+h \b'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Ident'
        StyleName = 'Id'
        TokenType = 2
        Expression = '[a-z_%]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Str'
        StyleName = 'String'
        TokenType = 4
        Expression = '("|'') .*? \1'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[\.,:\-\+\*\\/%@<>\(\)\[\]\{\}\?]'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <    
      item
        DisplayName = 'Registers'
        StyleName = 'Registers'
        BlockType = btTagDetect
        ConditionList = <        
          item
            TagList.Strings = (
              'ah'
              'al'
              'ax'
              'bh'
              'bl'
              'bp'
              'bx'
              'ch'
              'cl'
              'cs'
              'cx'
              'dh'
              'di'
              'ds'
              'dx'
              'eax'
              'ebp'
              'ebx'
              'ecx'
              'edi'
              'edx'
              'eip'
              'es'
              'esc'
              'esi'
              'esp'
              'si'
              'sp'
              'ss'
            )
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'Keywords'
        StyleName = 'Id std'
        BlockType = btTagDetect
        ConditionList = <        
          item
            TagList.Strings = (
              'aaa'
              'aad'
              'aam'
              'aas'
              'adc'
              'add'
              'and'
              'arpl'
              'assume'
              'bound'
              'bsf'
              'bsr'
              'bswap'
              'bt'
              'btc'
              'btr'
              'bts'
              'byte'
              'call'
              'cbw'
              'cdq'
              'clc'
              'cld'
              'cli'
              'clts'
              'cmc'
              'cmp'
              'cmps'
              'cmpsb'
              'cmpsd'
              'cmpsw'
              'cmpxchg'
              'comment'
              'cwd'
              'cwde'
              'daa'
              'das'
              'db'
              'dd'
              'dec'
              'div'
              'dl'
              'dq'
              'dt'
              'dw'
              'dword'
              'end'
              'endm'
              'endp'
              'ends'
              'enter'
              'eq'
              'equ'
              'exitm'
              'extrn'
              'f2xm1'
              'fabs'
              'fadd'
              'faddp'
              'far'
              'fbld'
              'fbstp'
              'fchs'
              'fclex'
              'fcom'
              'fcomp'
              'fcompp'
              'fcos'
              'fdecstp'
              'fdisi'
              'fdiv'
              'fdivp'
              'fdivr'
              'fdivrp'
              'feni'
              'ffree'
              'fiadd'
              'ficom'
              'ficomp'
              'fidiv'
              'fidivr'
              'fild'
              'fimul'
              'fincstp'
              'finit'
              'fist'
              'fistp'
              'fisub'
              'fisubr'
              'fld'
              'fld1'
              'fldcw'
              'fldenv'
              'fldl2e'
              'fldl2t'
              'fldlg2'
              'fldln2'
              'fldpi'
              'fldz'
              'fmul'
              'fmulp'
              'fnclex'
              'fndisi'
              'fneni'
              'fninit'
              'fnop'
              'fnsave'
              'fnstcw'
              'fnstenv'
              'fnstsw'
              'fpatan'
              'fprem'
              'fprem1'
              'fptan'
              'frndint'
              'frstor'
              'fs'
              'fsave'
              'fscale'
              'fsetpm'
              'fsin'
              'fsincos'
              'fsqrt'
              'fst'
              'fstcw'
              'fstenv'
              'fstp'
              'fstsw'
              'fsub'
              'fsubp'
              'fsubr'
              'fsubrp'
              'ftst'
              'fucom'
              'fucomp'
              'fucompp'
              'fwait'
              'fxam'
              'fxch'
              'fxtract'
              'fyl2x'
              'fyl2xp1'
              'ge'
              'group'
              'gs'
              'gt'
              'high'
              'hlt'
              'idiv'
              'imul'
              'in'
              'inc'
              'include'
              'insb'
              'insd'
              'insw'
              'int'
              'into'
              'invd'
              'invlpg'
              'iret'
              'iretd'
              'ja'
              'jae'
              'jb'
              'jbe'
              'jc'
              'jcxz'
              'je'
              'jecxz'
              'jg'
              'jge'
              'jl'
              'jle'
              'jmp'
              'jna'
              'jnae'
              'jnb'
              'jnbe'
              'jnc'
              'jne'
              'jng'
              'jnge'
              'jnl'
              'jnle'
              'jno'
              'jnp'
              'jns'
              'jnz'
              'jo'
              'jp'
              'jpe'
              'jpo'
              'js'
              'jz'
              'label'
              'lahf'
              'lar'
              'large'
              'lds'
              'le'
              'lea'
              'leave'
              'length'
              'les'
              'lfs'
              'lgdt'
              'lgs'
              'lidt'
              'lldt'
              'lmsw'
              'local'
              'lock'
              'lods'
              'lodsb'
              'lodsd'
              'lodsw'
              'loop'
              'loopd'
              'loopde'
              'loopdne'
              'loopdnz'
              'loopdz'
              'loope'
              'loopne'
              'loopnz'
              'loopz'
              'low'
              'lsl'
              'lss'
              'lt'
              'ltr'
              'macro'
              'mask'
              'mod'
              'mov'
              'movs'
              'movsb'
              'movsd'
              'movsw'
              'movsx'
              'movzx'
              'mul'
              'name'
              'near'
              'neg'
              'nop'
              'not'
              'offset'
              'or'
              'org'
              'out'
              'outsb'
              'outsd'
              'outsw'
              'page'
              'pop'
              'popa'
              'popad'
              'popf'
              'popfd'
              'proc'
              'ptr'
              'public'
              'purge'
              'push'
              'pusha'
              'pushad'
              'pushf'
              'pushfd'
              'qword'
              'rcl'
              'rcr'
              'record'
              'rep'
              'repe'
              'repne'
              'repnz'
              'rept'
              'repz'
              'ret'
              'retf'
              'retn'
              'rol'
              'ror'
              'sahf'
              'sal'
              'sar'
              'sbb'
              'scas'
              'scasb'
              'scasd'
              'scasw'
              'seg'
              'segcs'
              'segds'
              'seges'
              'segfs'
              'seggs'
              'segment'
              'segss'
              'seta'
              'setae'
              'setb'
              'setbe'
              'setc'
              'sete'
              'setg'
              'setge'
              'setl'
              'setle'
              'setna'
              'setnae'
              'setnb'
              'setnbe'
              'setnc'
              'setne'
              'setng'
              'setnge'
              'setnl'
              'setnle'
              'setno'
              'setnp'
              'setns'
              'setnz'
              'seto'
              'setp'
              'setpe'
              'setpo'
              'sets'
              'setz'
              'sgdt'
              'shl'
              'shld'
              'short'
              'shr'
              'shrd'
              'sidt'
              'size'
              'sldt'
              'small'
              'smsw'
              'st'
              'stc'
              'std'
              'sti'
              'stos'
              'stosb'
              'stosd'
              'stosw'
              'str'
              'struc'
              'sub'
              'subttl'
              'symtype'
              'tbyte'
              'test'
              'this'
              'title'
              'type'
              'verr'
              'verw'
              'wait'
              'wbinvd'
              'width'
              'word'
              'xadd'
              'xchg'
              'xlat'
              'xor'
            )
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'seg'
        ConditionList = <        
          item
            TagList.Strings = (
              'segment'
            )
            TokenTypes = 4
            IgnoreCase = True
          end        
          item
            TokenTypes = 4
          end>
        BlockEnd = 'seg end'
        NameFmt = 'segment %s0'
        RefToCondEnd = True
        HighlightPos = cpAny
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'seg end'
        BlockType = btRangeEnd
        ConditionList = <        
          item
            TagList.Strings = (
              'ends'
            )
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'proc'
        ConditionList = <        
          item
            TagList.Strings = (
              'proc'
            )
            TokenTypes = 4
            IgnoreCase = True
          end        
          item
            TokenTypes = 4
          end>
        BlockEnd = 'proc end'
        NameFmt = 'proc %s0'
        RefToCondEnd = True
        HighlightPos = cpAny
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'proc end'
        BlockType = btRangeEnd
        ConditionList = <        
          item
            TagList.Strings = (
              'endp'
            )
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'macro'
        ConditionList = <        
          item
            TagList.Strings = (
              'macro'
            )
            TokenTypes = 4
            IgnoreCase = True
          end        
          item
            TokenTypes = 4
          end>
        BlockEnd = 'macro end'
        NameFmt = 'macro %s0'
        RefToCondEnd = True
        HighlightPos = cpAny
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'macro end'
        BlockType = btRangeEnd
        ConditionList = <        
          item
            TagList.Strings = (
              'endm'
            )
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'macro%'
        ConditionList = <        
          item
            TokenTypes = 4
          end        
          item
            TagList.Strings = (
              '%macro'
            )
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'macro% end'
        NameFmt = 'macro %s-1'
        RefToCondEnd = True
        HighlightPos = cpAny
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'macro% end'
        BlockType = btRangeEnd
        ConditionList = <        
          item
            TagList.Strings = (
              '%endmacro'
            )
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '; x86 assembly sample source'
      'CODE SEGMENT'#9'BYTE PUBLIC '
      '    ASSUME'#9'CS:CODE'
      '    '
      '    PUSH SS'
      '    POP DS'
      '    MOV AX, AABBh'
      '    MOV'#9'BYTE PTR ES:[DI], 255'
      '    JMP SHORT @AsmEnd'
      ''
      '  welcomeMsg DB ''Hello World'', 0'
      ''
      '  @AsmEnd:'
      '    MOV AX, 0'
      '    RET'
      '    '
      'test1 PROC NEAR'
      '      MOV ax,10'
      '      CALL test2'
      '      RET'
      'test1 ENDP'
      ''
      'test2 PROC FAR'
      '      ADD ax,ax'
      '      RET'
      'test2 ENDP'
      ''
      'CODE ENDS'
      '  '
      'PUSHALL MACRO'
      '       PUSH AX BX CX DX'
      '       PUSH DS SI'
      '       PUSH ES DI'
      #9'ENDM'
      '    '
      '; nasm macro taking 1 par'
      '%MACRO DOSB 1'
      '           mov ah, %1'
      '           int 21h'
      '%ENDMACRO    '
      '  '
      'END'
    )
    TokenTypeNames.Strings = (
      'Label'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Number'
    )
    Extentions = 'asm'
    LexerName = 'Assembly'
    Notes.Strings = (
      'Original from EControl,'
      'changes by Alexey (SynWrite)'
      '+ macros/procs/segments in tree (for MASM/NASM)'
      '+ parser "symbol"'
      '* renamed styles'
    )
    LineComment = ';'
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal1: TLibSyntAnalyzer
    Formats = <    
      item
        DisplayName = 'Default'
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        FormatType = ftCustomFont
      end    
      item
        DisplayName = 'Symbol'
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end    
      item
        DisplayName = 'Number'
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end    
      item
        DisplayName = 'String'
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
      end    
      item
        DisplayName = 'Identifier'
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
      end    
      item
        DisplayName = 'Reserved word'
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end    
      item
        DisplayName = 'Comment'
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end    
      item
        DisplayName = 'Preprocessor'
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end    
      item
        DisplayName = 'Current block'
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BgColor = clMoneyGreen
        FormatType = ftBackGround
        BorderTypeLeft = blSolid
        BorderColorLeft = clSilver
        BorderTypeTop = blSolid
        BorderColorTop = clSilver
        BorderTypeRight = blSolid
        BorderColorRight = clSilver
        BorderTypeBottom = blSolid
        BorderColorBottom = clSilver
      end>
    TokenRules = <    
      item
        DisplayName = 'Comment 1'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)/\*.*?(\*/|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Comment 2'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '//.*'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Region Name'
        StyleName = 'Preprocessor'
        BlockName = 'Region header'
        TokenType = 10
        Expression = '.*'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '(?s)".*?("|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Reserved Id'
        StyleName = 'Reserved word'
        Expression = '\b(if | foreach | while | catch)\b'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Any name'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'HEX'
        StyleName = 'Number'
        TokenType = 7
        Expression = '0x[\da-f]*'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = '\d+ \.? \d+ e [\+\-]? \d+ | \d+ \. \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Region'
        StyleName = 'Preprocessor'
        TokenType = 9
        Expression = '\#region'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Preprocessor'
        StyleName = 'Preprocessor'
        TokenType = 9
        Expression = '\#\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Single symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[\{\}\(\)\[\],;\.@]'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/\+\-\*:=<>&/\|\^!~]+'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Char'
        StyleName = 'String'
        TokenType = 8
        Expression = '''.*?(''|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <    
      item
        DisplayName = 'Key words'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <        
          item
            TagList.Strings = (
              'abstract'
              'base'
              'bool'
              'break'
              'byte'
              'case'
              'catch'
              'char'
              'checked'
              'class'
              'const'
              'continue'
              'decimal'
              'default'
              'delegate'
              'do'
              'double'
              'else'
              'enum'
              'event'
              'explicit'
              'extern'
              'false'
              'finally'
              'fixed'
              'float'
              'for'
              'foreach'
              'get'
              'goto'
              'if'
              'implicit'
              'in'
              'int'
              'interface'
              'internal'
              'is'
              'lock'
              'long'
              'namespace'
              'new'
              'null'
              'object'
              'operator'
              'out'
              'override'
              'params'
              'private'
              'protected'
              'public'
              'readonly'
              'ref'
              'return'
              'sbyte'
              'sealed'
              'set'
              'short'
              'sizeof'
              'static'
              'string'
              'struct'
              'switch'
              'this'
              'throw'
              'true'
              'try'
              'typeof'
              'uint'
              'ulong'
              'unchecked'
              'unsafe'
              'ushort'
              'using'
              'virtual'
              'void'
              'where'
              'while'
              'yield'
            )
            TokenTypes = 4
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end    
      item
        DisplayName = '#if'
        ConditionList = <        
          item
            TagList.Strings = (
              '#if*'
              '#ifdef*'
              '#ifndef*'
            )
            CondType = tcMask
            TokenTypes = 1024
          end>
        BlockEnd = '#endif'
        HighlightPos = cpBound
        IgnoreAsParent = False
      end    
      item
        DisplayName = '#endif'
        BlockType = btRangeEnd
        ConditionList = <        
          item
            TagList.Strings = (
              '#endif'
            )
            TokenTypes = 1024
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'function begin'
        BlockName = 'function begin'
        NotParent = True
        ConditionList = <        
          item
            TagList.Strings = (
              '{'
            )
            TokenTypes = 8
          end        
          item
            CondType = tcSkip
            TokenTypes = 2
          end        
          item
            TagList.Strings = (
              ')'
            )
            TokenTypes = 8
          end        
          item
            CondType = tcSkip
            TokenTypes = 12
          end        
          item
            TagList.Strings = (
              '('
            )
            TokenTypes = 8
          end        
          item
            TokenTypes = 4
          end        
          item
            TagList.Strings = (
              '('
              'class'
            )
            CondType = tcNotEqual
            TokenTypes = 12
          end>
        IdentIndex = -1
        BlockEnd = 'function end'
        NameFmt = '%s-1~s[(]1'
        RefToCondEnd = True
        HighlightPos = cpBound
        GrammaRuleName = 'func'
        TreeItemImage = 5
        IgnoreAsParent = False
      end    
      item
        DisplayName = '{'
        StyleName = 'Current block'
        ConditionList = <        
          item
            TagList.Strings = (
              '{'
            )
            TokenTypes = 8
          end>
        BlockEnd = '}'
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        DrawStaple = True
        CollapseFmt = '{ ... }'
        IgnoreAsParent = False
        AutoCloseMode = acmCloseNearest
        AutoCloseText = '}'
      end    
      item
        DisplayName = 'class'
        ConditionList = <        
          item
            TagList.Strings = (
              'class'
            )
            TokenTypes = 4
          end>
        IdentIndex = -1
        BlockEnd = 'end of class'
        NameFmt = '%s-1'
        HighlightPos = cpBound
        TreeItemImage = 1
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'namespace'
        ConditionList = <        
          item
            TagList.Strings = (
              'namespace'
            )
            TokenTypes = 4
          end>
        IdentIndex = -1
        BlockEnd = 'end of namespace'
        HighlightPos = cpBound
        TreeItemImage = 0
        IgnoreAsParent = False
      end    
      item
        DisplayName = '}'
        BlockName = '{'
        BlockType = btRangeEnd
        ConditionList = <        
          item
            TagList.Strings = (
              '}'
            )
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'function end'
        BlockName = 'function begin'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <        
          item
            TagList.Strings = (
              '}'
            )
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'end of class'
        BlockName = 'class'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <        
          item
            TagList.Strings = (
              '}'
            )
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'end of namespace'
        BlockName = 'namespace'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <        
          item
            TagList.Strings = (
              '}'
            )
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end    
      item
        DisplayName = '('
        StyleName = 'Current block'
        ConditionList = <        
          item
            TagList.Strings = (
              '('
            )
            TokenTypes = 8
          end>
        BlockEnd = ')'
        NotCollapsed = True
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpBoundTagBegin
        DynSelectMin = True
        IgnoreAsParent = False
      end    
      item
        DisplayName = ')'
        BlockType = btRangeEnd
        ConditionList = <        
          item
            TagList.Strings = (
              ')'
            )
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end    
      item
        DisplayName = '['
        StyleName = 'Current block'
        ConditionList = <        
          item
            TagList.Strings = (
              '['
            )
            TokenTypes = 8
          end>
        BlockEnd = ']'
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpBoundTagBegin
        DynSelectMin = True
        CollapseFmt = '[ ... ]'
        IgnoreAsParent = False
      end    
      item
        DisplayName = ']'
        BlockType = btRangeEnd
        ConditionList = <        
          item
            TagList.Strings = (
              ']'
            )
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'Region header'
        ConditionList = <        
          item
            TagList.Strings = (
              '#region'
            )
            TokenTypes = 512
            IgnoreCase = True
          end>
        DisplayInTree = False
        HighlightPos = cpBound
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'Region header end'
        BlockType = btRangeEnd
        ConditionList = <        
          item
            TokenTypes = 1024
          end>
        BlockEnd = 'Region header'
        HighlightPos = cpBound
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'prop begin'
        BlockName = 'prop begin'
        NotParent = True
        ConditionList = <        
          item
            TagList.Strings = (
              '{'
            )
            TokenTypes = 8
          end        
          item
            TagList.Strings = (
              'get'
              'set'
            )
            TokenTypes = 4
          end        
          item
            CondType = tcSkip
            TokenTypes = 2
          end        
          item
            TagList.Strings = (
              '{'
            )
            TokenTypes = 8
          end        
          item
            CondType = tcSkip
            TokenTypes = 2
          end        
          item
            TokenTypes = 4
          end>
        BlockEnd = 'prop end'
        NameFmt = '%s0'
        RefToCondEnd = True
        HighlightPos = cpAny
        TreeItemImage = 4
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'prop end'
        BlockType = btRangeEnd
        ConditionList = <        
          item
            TagList.Strings = (
              '}'
            )
            TokenTypes = 8
          end>
        BlockEnd = 'prop begin'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'enum begin'
        ConditionList = <        
          item
            TagList.Strings = (
              '{'
            )
            TokenTypes = 8
          end        
          item
            TokenTypes = 4
          end        
          item
            TagList.Strings = (
              'enum'
            )
            TokenTypes = 4
          end>
        BlockEnd = 'enum end'
        NameFmt = '%s0 %s-1'
        RefToCondEnd = True
        HighlightPos = cpAny
        TreeItemImage = 2
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'enum end'
        BlockType = btRangeEnd
        ConditionList = <        
          item
            TagList.Strings = (
              '}'
            )
            TokenTypes = 8
          end>
        BlockEnd = 'enum begin'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'indexer begin'
        ConditionList = <        
          item
            TagList.Strings = (
              '{'
            )
            TokenTypes = 8
          end        
          item
            CondType = tcSkip
            TokenTypes = 2
          end        
          item
            TagList.Strings = (
              ']'
            )
            TokenTypes = 8
          end        
          item
            CondType = tcSkip
            TokenTypes = 4
          end        
          item
            TagList.Strings = (
              '['
            )
            TokenTypes = 8
          end        
          item
            TagList.Strings = (
              'this'
            )
            TokenTypes = 4
          end        
          item
            TokenTypes = 4
          end>
        BlockEnd = 'indexer end'
        NameFmt = 'indexer %s0'
        RefToCondEnd = True
        HighlightPos = cpAny
        TreeItemImage = 7
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'indexer end'
        BlockType = btRangeEnd
        ConditionList = <        
          item
            TagList.Strings = (
              '}'
            )
            TokenTypes = 8
          end>
        BlockEnd = 'indexer begin'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'struct begin'
        ConditionList = <        
          item
            TagList.Strings = (
              '{'
            )
            TokenTypes = 8
          end        
          item
            CondType = tcSkip
            TokenTypes = 2
          end        
          item
            TokenTypes = 4
          end        
          item
            TagList.Strings = (
              'struct'
            )
            TokenTypes = 4
          end>
        BlockEnd = 'struct end'
        NameFmt = '%s-1'
        RefToCondEnd = True
        HighlightPos = cpAny
        TreeItemImage = 2
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'struct end'
        BlockType = btRangeEnd
        ConditionList = <        
          item
            TagList.Strings = (
              '}'
            )
            TokenTypes = 8
          end>
        BlockEnd = 'struct begin'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'oper begin'
        ConditionList = <        
          item
            TagList.Strings = (
              '{'
            )
            TokenTypes = 8
          end        
          item
            CondType = tcSkip
            TokenTypes = 2
          end        
          item
            TagList.Strings = (
              ')'
            )
            TokenTypes = 8
          end        
          item
            CondType = tcSkip
            TokenTypes = 12
          end        
          item
            TagList.Strings = (
              '('
            )
            TokenTypes = 8
          end        
          item
            TokenTypes = 8
          end        
          item
            TagList.Strings = (
              'operator'
            )
            TokenTypes = 4
          end        
          item
            TokenTypes = 4
          end>
        BlockEnd = 'oper end'
        NameFmt = 'operator %s-2'
        RefToCondEnd = True
        HighlightPos = cpAny
        TreeItemImage = 7
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'oper end'
        BlockType = btRangeEnd
        ConditionList = <        
          item
            TagList.Strings = (
              '}'
            )
            TokenTypes = 8
          end>
        BlockEnd = 'oper begin'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'field'
        ConditionList = <        
          item
            TagList.Strings = (
              '='
              ','
              ';'
            )
            TokenTypes = 8
          end        
          item
            TokenTypes = 4
          end        
          item
            CondType = tcMask
            TokenTypes = 4
          end        
          item
            TagList.Strings = (
              'private'
              'public'
              'static'
            )
            TokenTypes = 4
          end>
        NameFmt = '%sz-1'
        RefToCondEnd = True
        HighlightPos = cpAny
        NoEndRule = True
        GrammaRuleName = 'field'
        TreeItemImage = 3
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'delegate begin'
        ConditionList = <        
          item
            TagList.Strings = (
              '('
            )
            TokenTypes = 8
          end        
          item
            CondType = tcSkip
            TokenTypes = 2
          end        
          item
            TokenTypes = 4
          end        
          item
            CondType = tcSkip
            TokenTypes = 12
          end        
          item
            TagList.Strings = (
              'delegate'
            )
            TokenTypes = 4
          end>
        NameFmt = '%sz0'
        HighlightPos = cpAny
        NoEndRule = True
        TreeItemImage = 3
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <    
      item
        DisplayName = 'XML doc'
        Enabled = False
        StartExpression = '///'
        EndExpression = '(?s)(\r\n | ///)'
        SyntAnalyzer = SyntAnal22
      end>
    SampleText.Strings = (
      '//C# syntax highlighting'
      'enum Days {P1, P2, P3};'
      ' '
      'public class Stack: IEdit, IEdit2'
      '{'
      '  public delegate int[] DelDemo();'
      '  private Node first = null;'
      '  public bool Empty {'
      '    //property'
      '    get {'
      '      return (first == null);'
      '    }'
      '  }'
      '  public object IEdit.Pop() {'
      '    if (first == null)'
      '      throw new Exception("Can''t Pop from an empty Stack.");'
      '    else {'
      '      object temp = first.Value;'
      '      first = first.Next;'
      '      return temp;'
      '    }'
      '  }'
      '  '
      '  static void RegisterFunction(Type reg1; Type2 reg2)'
      '  {'
      '    CategoryRegistration(registerType);'
      '  }'
      ''
      '  [ComUnregisterFunction()]'
      '  [ComVisible(false)] '
      '  static void UnregisterFunction(Type reg1; Type[] regs; Type2 reg2)'
      '  {'
      '    CategoryUnregistration(registerType);'
      '  }'
      '}'
    )
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Preprocessor'
      'Region name'
    )
    Gramma.Gramma = 'Complex_name =  <Identifier> | Complex_name "." <Identifier>;'#10'field = (''private'' | ''public'' | ''static'') Complex_name <Identifier> (''='' | '','' | '';'');'#10#10'Params = <Identifier> | Params <Identifier> | Params ('','' | ''.'' | '';'' | '':'' | ''['' | '']'');'#10'func = <Identifier> (''['' '']'')? Complex_name ''('' Params? '')'' ''{'';'#10
    Extentions = 'cs c cpp h'
    LexerName = 'C#'
    LineComment = '//'
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal84: TLibSyntAnalyzer
    Formats = <    
      item
        DisplayName = 'Symbol'
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end    
      item
        DisplayName = 'Number'
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end    
      item
        DisplayName = 'String'
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
        FormatType = ftColor
      end    
      item
        DisplayName = 'Identifier'
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
      end    
      item
        DisplayName = 'Reserved word'
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end    
      item
        DisplayName = 'Comment'
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end    
      item
        DisplayName = 'Variable'
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end    
      item
        DisplayName = 'Code block'
        Font.Color = clNone
        Font.Height = -13
        Font.Name = 'Courier New'
        BgColor = 15856098
        FormatType = ftBackGround
      end    
      item
        DisplayName = 'Code border'
        Font.Color = clWindow
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BgColor = clGray
      end    
      item
        DisplayName = 'HTML'
        Font.CharSet = RUSSIAN_CHARSET
        Font.Color = clNone
        Font.Height = -13
        Font.Name = 'Verdana'
      end    
      item
        DisplayName = 'Current Block'
        Font.Color = clNone
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BgColor = 15400927
        BorderTypeLeft = blSolid
        BorderColorLeft = clGray
        BorderTypeTop = blSolid
        BorderColorTop = clGray
        BorderTypeRight = blSolid
        BorderColorRight = clGray
        BorderTypeBottom = blSolid
        BorderColorBottom = clGray
      end    
      item
        DisplayName = 'Exec'
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        BgColor = clSkyBlue
      end>
    TokenRules = <    
      item
        DisplayName = 'Code block start'
        StyleName = 'Code border'
        TokenType = 9
        Expression = '<\?(php)?'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Code block end'
        StyleName = 'Code border'
        TokenType = 10
        Expression = '\?>'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Comment 1'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)/\*.*?(\*/|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Comment 2'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '\#.*'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Comment 3'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '//.*'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '(?s)(["''])(\\\\|\\\1|.)*?\1'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'String Heredoc'
        StyleName = 'String'
        TokenType = 4
        Expression = '(?s)<<<(\w+)\z.+?\z\1;'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Variable'
        StyleName = 'Variable'
        TokenType = 2
        Expression = '\$\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Any name'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = '\d+ \.? \d+ e [\+\-]? \d+ | \d+ \. \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '0x[0-9a-f]+ | 0b[01]+ | \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Single symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[\{\}\(\)\[\],;\.\\]'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[!/\+\-\*:=<>&/\|\^~\?]'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Exec'
        StyleName = 'Exec'
        TokenType = 4
        Expression = '`.+?`'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <    
      item
        DisplayName = 'Key words'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <        
          item
            TagList.Strings = (
              'as'
              'break'
              'case'
              'class'
              'const'
              'continue'
              'default'
              'define'
              'defined'
              'do'
              'echo'
              'else'
              'elseif'
              'endfor'
              'endforeach'
              'endif'
              'endswitch'
              'endwhile'
              'exit'
              'extends'
              'for'
              'function'
              'gettype'
              'global'
              'if'
              'include'
              'include_once'
              'int'
              'isset'
              'old_function'
              'print'
              'private'
              'protected'
              'public'
              'pval'
              'require'
              'require_once'
              'return'
              'settype'
              'static'
              'string'
              'switch'
              'use'
              'var'
              'void'
              'while'
            )
            TokenTypes = 4
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'Code block start'
        StyleName = 'Code block'
        ConditionList = <        
          item
            TokenTypes = 512
          end>
        BlockEnd = 'Code block end'
        DisplayInTree = False
        DynHighlight = dhRange
        HighlightPos = cpBound
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'Code block end'
        BlockType = btRangeEnd
        ConditionList = <        
          item
            TokenTypes = 1024
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'Begin'
        StyleName = 'Current Block'
        ConditionList = <        
          item
            TagList.Strings = (
              '{'
            )
            TokenTypes = 8
          end>
        BlockEnd = 'End'
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        DrawStaple = True
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'End'
        BlockType = btRangeEnd
        ConditionList = <        
          item
            TagList.Strings = (
              '}'
            )
            TokenTypes = 8
          end>
        BlockEnd = 'Begin'
        HighlightPos = cpBound
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'class'
        ConditionList = <        
          item
            TagList.Strings = (
              'class'
            )
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'class_end'
        EndOfTextClose = True
        NameFmt = '%s0 %s-1'
        HighlightPos = cpAny
        SelfClose = True
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'class_end'
        BlockName = 'class'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <        
          item
            TagList.Strings = (
              '}'
            )
            TokenTypes = 8
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'function'
        BlockName = 'class'
        ConditionList = <        
          item
            TagList.Strings = (
              'function'
            )
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'function_end'
        EndOfTextClose = True
        NameFmt = '%s0~[(]1'
        RefToCondEnd = True
        HighlightPos = cpAny
        CancelNextRules = True
        SelfClose = True
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'function_end'
        BlockName = 'function'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <        
          item
            TagList.Strings = (
              '}'
            )
            TokenTypes = 8
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'function_without_class'
        ConditionList = <        
          item
            TagList.Strings = (
              'function'
            )
            TokenTypes = 4
          end>
        BlockEnd = 'function_without_class_end'
        NameFmt = '%s0~[(]1'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'function_without_class_end'
        BlockName = 'function_without_class'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <        
          item
            TagList.Strings = (
              '}'
            )
            TokenTypes = 8
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <    
      item
        DisplayName = 'HTML'
        StyleName = 'HTML'
        StartExpression = '\?>'
        EndExpression = '<\?'
        SyntAnalyzer = SyntAnal36
        FromTextBegin = True
      end>
    SampleText.Strings = (
      '<?php'
      ''
      'function ppp(int a){'
      '  $a = 10 + 12.2;'
      '  echo $a; '
      '  echo ''test''."\\";'
      '  if (a){'
      '  }'
      '}'
      ''
      'class f {'
      '  function a(){'
      '    if (a) { a++; }'
      '    i++;'
      '  }'
      '  function b(){'
      '  }'
      '}'
      ''
      'class ff extends f {'
      '  function a(){'
      '    i++;'
      '  }'
      ''
      '  function b(){'
      '    if (a>b) {'
      '      a++;'
      '    }'
      '  }'
      '}'
      ''
      'function pp(int a; int b){'
      '  i++;'
      '  if (a){'
      '  }'
      '}'
      ''
      '?>'
    )
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Code Start'
      'Code End'
    )
    Extentions = 'php'
    LexerName = 'PHP'
    Notes.Strings = (
      'Original: EControl'
      'Tree added by Matthias030 (SynWrite admin)'
      'Changes by Alexey (SynWrite)'
    )
    RestartFromLineStart = True
    LineComment = '//'
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal56: TLibSyntAnalyzer
    Formats = <    
      item
        DisplayName = 'Default'
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        FormatType = ftCustomFont
      end    
      item
        DisplayName = 'Comment'
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end    
      item
        DisplayName = 'Identifier'
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
      end    
      item
        DisplayName = 'String'
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
      end    
      item
        DisplayName = 'Number'
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end    
      item
        DisplayName = 'Symbol'
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end    
      item
        DisplayName = 'Reserved word'
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
      end    
      item
        DisplayName = 'Function separator'
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        BgColor = clLime
      end    
      item
        DisplayName = 'Function background'
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        BgColor = clCream
        FormatType = ftBackGround
      end    
      item
        DisplayName = 'Current block bound'
        Font.CharSet = RUSSIAN_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BgColor = 13369046
        FormatType = ftColor
        BorderTypeLeft = blSolid
        BorderColorLeft = clGray
        BorderTypeTop = blSolid
        BorderColorTop = clGray
        BorderTypeRight = blSolid
        BorderColorRight = clGray
        BorderTypeBottom = blSolid
        BorderColorBottom = clGray
      end    
      item
        DisplayName = 'Operator Keywords'
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        FormatFlags = [ffBold, ffItalic, ffUnderline, ffStrikeOut, ffReadOnly, ffHidden]
      end>
    TokenRules = <    
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '".*?("|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Id_spec_then'
        StyleName = 'Reserved word'
        TokenType = 6
        Expression = 'then \x20* $'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Id_spec_endif'
        StyleName = 'Reserved word'
        TokenType = 7
        Expression = '(?<=^\x20*) end \x20+ if \b'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Id'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+ \.? \d+ e [\+\-]? \d+ | \d+ \. \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Hex'
        StyleName = 'Number'
        TokenType = 5
        Expression = '&H[\da-f]+&? | &o[0-7]+'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '''.*'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Comment in JSP'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '//.*'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/,\.;:\(\)=<>\+\-&%\$\{\}!@]+'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <    
      item
        DisplayName = 'Keywords'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <        
          item
            TagList.Strings = (
              'addressof'
              'alias'
              'and'
              'appactivate'
              'as'
              'beep'
              'binary'
              'boolean'
              'byref'
              'byte'
              'byval'
              'call'
              'case'
              'catch'
              'chdir'
              'chdrive'
              'choose'
              'class'
              'close'
              'const'
              'currency'
              'date'
              'decimal'
              'declare'
              'deletesetting'
              'dim'
              'do'
              'doevents'
              'double'
              'each'
              'else'
              'elseif'
              'empty'
              'end'
              'enum'
              'eqv'
              'erase'
              'error'
              'event'
              'exit'
              'False'
              'filecopy'
              'finally'
              'for'
              'friend'
              'function'
              'get'
              'gosub'
              'goto'
              'if'
              'imp'
              'implements'
              'in'
              'input'
              'integer'
              'is'
              'kill'
              'let'
              'lib'
              'like'
              'line'
              'load'
              'lock'
              'long'
              'loop'
              'lset'
              'new'
              'next'
              'not'
              'null'
              'object'
              'on'
              'option'
              'optional'
              'or'
              'paramarray'
              'private'
              'property'
              'public'
              'redim'
              'resume'
              'return'
              'select'
              'set'
              'single'
              'static'
              'step'
              'stop'
              'string'
              'sub'
              'switch'
              'then'
              'to'
              'True'
              'try'
              'type'
              'typeof'
              'unlock'
              'until'
              'variant'
              'wend'
              'while'
              'with'
              'withevents'
              'write'
              'xor'
            )
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'Sub begin line break'
        StyleName = 'Function separator'
        BlockName = 'Func'
        NotParent = True
        BlockType = btLineBreak
        ConditionList = <        
          item
            TagList.Strings = (
              'function'
              'sub'
            )
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'Sub end line break'
        StyleName = 'Function separator'
        BlockType = btLineBreak
        ConditionList = <        
          item
            TagList.Strings = (
              'function'
              'sub'
            )
            TokenTypes = 4
            IgnoreCase = True
          end        
          item
            TagList.Strings = (
              'end'
            )
            TokenTypes = 4
            IgnoreCase = True
          end>
        LinePos = lbBottom
        HighlightPos = cpBound
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'Func end'
        BlockType = btRangeEnd
        ConditionList = <        
          item
            TagList.Strings = (
              'function'
              'sub'
            )
            TokenTypes = 4
            IgnoreCase = True
          end        
          item
            TagList.Strings = (
              'end'
            )
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        CancelNextRules = True
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'Func'
        StyleName = 'Function background'
        ConditionList = <        
          item
            TagList.Strings = (
              'function'
              'sub'
            )
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'Func end'
        Highlight = True
        NameFmt = '%s0 %s-1'
        DynHighlight = dhRange
        HighlightPos = cpRange
        DynSelectMin = True
        CollapseFmt = '%s0 %s-1'
        TreeItemStyle = 'Reserved word'
        TreeItemImage = 5
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'Begin'
        StyleName = 'Current block bound'
        ConditionList = <        
          item
            TagList.Strings = (
              'end'
            )
            CondType = tcNotEqual
            TokenTypes = 4
            IgnoreCase = True
          end        
          item
            TagList.Strings = (
              'property'
              'select'
              'type'
              'with'
            )
            TokenTypes = 4
            IgnoreCase = True
          end        
          item
            TagList.Strings = (
              'end'
            )
            CondType = tcNotEqual
            TokenTypes = 4
            IgnoreCase = True
          end>
        IdentIndex = 1
        BlockOffset = 1
        BlockEnd = 'End'
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        DrawStaple = True
        CollapseFmt = '%s1 ...'
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'End'
        BlockType = btRangeEnd
        ConditionList = <        
          item
            TokenTypes = 4
          end        
          item
            TagList.Strings = (
              'end'
            )
            TokenTypes = 4
            IgnoreCase = True
          end>
        SameIdent = True
        HighlightPos = cpBound
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'Block comment'
        BlockName = 'Block comment'
        NotParent = True
        ConditionList = <        
          item
            TokenTypes = 2
          end>
        BlockEnd = 'Block comment end'
        DisplayInTree = False
        HighlightPos = cpBound
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'Block comment end'
        BlockType = btRangeEnd
        ConditionList = <        
          item
            TokenTypes = 509
          end        
          item
            TokenTypes = 2
          end>
        BlockOffset = 1
        HighlightPos = cpBound
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'Dim'
        ConditionList = <        
          item
            TokenTypes = 4
          end        
          item
            TagList.Strings = (
              'dim'
            )
            TokenTypes = 4
            IgnoreCase = True
          end>
        NotCollapsed = True
        GroupFmt = 'Variables'
        HighlightPos = cpBound
        NoEndRule = True
        TreeItemImage = 4
        TreeGroupImage = 0
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'OP Keywords'
        StyleName = 'Operator Keywords'
        BlockType = btTagDetect
        ConditionList = <        
          item
            TagList.Strings = (
              'imports'
              'Inherits'
              'Overloads'
              'Overrides'
              'private'
              'property'
              'protected'
              'public'
            )
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'Begin For'
        StyleName = 'Current block bound'
        ConditionList = <        
          item
            TagList.Strings = (
              'For'
            )
            TokenTypes = 4
            IgnoreCase = True
          end        
          item
            TagList.Strings = (
              'Exit'
            )
            CondType = tcNotEqual
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockOffset = -1
        BlockEnd = 'End For'
        DisplayInTree = False
        RefToCondEnd = True
        DynHighlight = dhBound
        HighlightPos = cpRange
        DrawStaple = True
        CollapseFmt = 'For...'
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'End For'
        BlockType = btRangeEnd
        ConditionList = <        
          item
            TagList.Strings = (
              'Next'
            )
            TokenTypes = 4
            IgnoreCase = True
          end        
          item
            TagList.Strings = (
              'Resume'
            )
            CondType = tcNotEqual
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockOffset = -1
        RefToCondEnd = True
        HighlightPos = cpAny
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'Begin do'
        ConditionList = <        
          item
            TagList.Strings = (
              'do'
            )
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'End do'
        DisplayInTree = False
        HighlightPos = cpAny
        DrawStaple = True
        CollapseFmt = 'Do...'
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'End do'
        BlockType = btRangeEnd
        ConditionList = <        
          item
            TagList.Strings = (
              'loop'
            )
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'Begin if'
        ConditionList = <        
          item
            TokenTypes = 64
          end>
        BlockEnd = 'End if'
        DisplayInTree = False
        HighlightPos = cpAny
        DrawStaple = True
        CollapseFmt = '...'
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'End if'
        BlockType = btRangeEnd
        ConditionList = <        
          item
            TokenTypes = 128
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '''Test'
      '''Test'
      ''
      'Function PrintNumber'
      '  Dim Number'
      '  Number = 12 + 12.2 + 1.2e3 + 1.2e-3'
      '  Response.Write "The number is " & number'
      '  '
      '  ''folded'
      '  If nnn Then'
      '    ''not folded'
      '    If True Then name '
      '  End If'
      '           '
      '  For I = 0 To Number'
      '    X = X + &hFF'
      '    X = X - &o7'
      '  Next'
      ''
      '  I = I + @;  '
      'End Function'
    )
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Number'
      'Id_spec_Then'
      'Id_spec_EndIf'
    )
    Extentions = 'vb vbs'
    LexerName = 'VBScript'
    Notes.Strings = (
      'Changed by Alex (SynWrite): '
      '- folded For-Next'
      '- folded If-EndIf, but only multi-line If'
      '- less token names'
      '- parser Octal nums'
    )
    LineComment = ''''
    Charset = DEFAULT_CHARSET
    left = 144
    top = 184
  end
  object SyntAnal38: TLibSyntAnalyzer
    Formats = <    
      item
        DisplayName = 'Symbol'
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end    
      item
        DisplayName = 'Number'
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end    
      item
        DisplayName = 'String'
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
      end    
      item
        DisplayName = 'String regex'
        Font.Color = clOlive
        Font.Height = -13
        Font.Name = 'Courier New'
      end    
      item
        DisplayName = 'Identifier'
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
      end    
      item
        DisplayName = 'Id keyword'
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
      end    
      item
        DisplayName = 'Id standard'
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier New'
      end    
      item
        DisplayName = 'Id jquery'
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
      end    
      item
        DisplayName = 'Comment'
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end    
      item
        DisplayName = 'Current block'
        Font.CharSet = RUSSIAN_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BgColor = 13369046
        FormatType = ftBackGround
        BorderTypeLeft = blSolid
        BorderColorLeft = clGray
        BorderTypeTop = blSolid
        BorderColorTop = clGray
        BorderTypeRight = blSolid
        BorderColorRight = clGray
        BorderTypeBottom = blSolid
        BorderColorBottom = clGray
      end>
    TokenRules = <    
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)/\*.*?(\*/|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Comment line'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '//.*? (?=<[/\w]) | //.*'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '(?s)("|'') (\\\\|\\\1|.)*? (\1|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'String Regex'
        StyleName = 'String regex'
        TokenType = 4
        Expression = '(?<=[=\(&!]\s*) / (\\/|\\\\|.)*? (/[gim]*|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'String Heredoc'
        StyleName = 'String'
        TokenType = 4
        Expression = '(?s) <r><!\[CDATA\[ .+? (\]\]></r> | \Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Id'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_\$]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Hex'
        StyleName = 'Number'
        TokenType = 5
        Expression = '0x[\da-f]*'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+ (\.\d+)? e [\+\-]? \d+ | \d+ \. \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Single symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[\{\}\(\)\[\],;\.\?]'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/\+\-\*:=<>&/\|\^~!%]'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <    
      item
        DisplayName = 'id keywords'
        StyleName = 'Id keyword'
        BlockType = btTagDetect
        ConditionList = <        
          item
            TagList.Strings = (
              'abstract'
              'arguments'
              'await'
              'boolean'
              'break'
              'byte'
              'case'
              'catch'
              'char'
              'class'
              'const'
              'continue'
              'debugger'
              'default'
              'delete'
              'do'
              'double'
              'else'
              'enum'
              'eval'
              'export'
              'extends'
              'false'
              'final'
              'finally'
              'float'
              'for'
              'function'
              'goto'
              'if'
              'implements'
              'import'
              'in'
              'instanceof'
              'int'
              'interface'
              'let'
              'long'
              'native'
              'new'
              'null'
              'package'
              'private'
              'protected'
              'public'
              'return'
              'short'
              'static'
              'super'
              'switch'
              'synchronized'
              'this'
              'throw'
              'throws'
              'transient'
              'true'
              'try'
              'typeof'
              'var'
              'void'
              'volatile'
              'while'
              'with'
              'yield'
            )
            TokenTypes = 4
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'id standard'
        StyleName = 'Id standard'
        BlockType = btTagDetect
        ConditionList = <        
          item
            TagList.Strings = (
              'Array'
              'Date'
              'hasOwnProperty'
              'Infinity'
              'isFinite'
              'isNaN'
              'isPrototypeOf'
              'length'
              'Math'
              'name'
              'NaN'
              'Number'
              'Object'
              'prototype'
              'String'
              'toString'
              'undefined'
              'valueOf'
            )
            TokenTypes = 4
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'id jquery'
        StyleName = 'Id jquery'
        BlockType = btTagDetect
        ConditionList = <        
          item
            TagList.Strings = (
              '$'
              'add'
              'addBack'
              'addClass'
              'after'
              'ajax'
              'ajaxComplete'
              'ajaxError'
              'ajaxPrefilter'
              'ajaxSend'
              'ajaxSetup'
              'ajaxStart'
              'ajaxStop'
              'ajaxSuccess'
              'ajaxTransport'
              'altKey'
              'always'
              'andSelf'
              'animate'
              'animated'
              'append'
              'appendTo'
              'attr'
              'before'
              'bind'
              'blur'
              'bottom'
              'boxModel'
              'browser'
              'button'
              'callbacks'
              'cancelBubble'
              'change'
              'checkbox'
              'checked'
              'children'
              'clearQueue'
              'click'
              'clone'
              'closest'
              'contains'
              'contents'
              'context'
              'core'
              'css'
              'cssHooks'
              'cssNumber'
              'ctrlKey'
              'currentTarget'
              'data'
              'dblclick'
              'deferred'
              'delay'
              'delegate'
              'delegateTarget'
              'dequeue'
              'detach'
              'die'
              'disable'
              'disabled'
              'done'
              'each'
              'empty'
              'enabled'
              'end'
              'eq'
              'error'
              'even'
              'event'
              'extend'
              'fadeIn'
              'fadeOut'
              'fadeTo'
              'fadeToggle'
              'fail'
              'file'
              'filter'
              'find'
              'finish'
              'fire'
              'fired'
              'fireWith'
              'first'
              'first-child'
              'first-of-type'
              'fn'
              'focus'
              'focusin'
              'focusout'
              'fx'
              'get'
              'getJSON'
              'getScript'
              'globalEval'
              'grep'
              'gt'
              'has'
              'hasClass'
              'hasData'
              'header'
              'height'
              'hidden'
              'hide'
              'holdReady'
              'hover'
              'html'
              'image'
              'inArray'
              'index'
              'init'
              'innerHeight'
              'innerWidth'
              'input'
              'insertAfter'
              'insertBefore'
              'interval'
              'is'
              'isArray'
              'isDefaultPrevented'
              'isEmptyObject'
              'isFunction'
              'isImmediatePropagationStopped'
              'isNumeric'
              'isPlainObject'
              'isPropagationStopped'
              'isRejected'
              'isResolved'
              'isWindow'
              'isXMLDoc'
              'jquery'
              'keyCode'
              'keydown'
              'keypress'
              'keyup'
              'lang'
              'last'
              'last-child'
              'last-of-type'
              'length'
              'live'
              'load'
              'lock'
              'locked'
              'lt'
              'makeArray'
              'map'
              'merge'
              'metaKey'
              'mousedown'
              'mouseenter'
              'mouseleave'
              'mousemove'
              'mouseout'
              'mouseover'
              'mouseup'
              'namespace'
              'next'
              'nextAll'
              'nextUntil'
              'noConflict'
              'noop'
              'not'
              'notify'
              'notifyWith'
              'now'
              'nth-child'
              'nth-child-last'
              'nth-first-of-type'
              'nth-last-child'
              'nth-last-of-type'
              'nth-of-type'
              'obj'
              'odd'
              'off'
              'offset'
              'offsetParent'
              'on'
              'one'
              'only-child'
              'only-of-type'
              'outerHeight'
              'outerWidth'
              'pageX'
              'pageY'
              'param'
              'parent'
              'parents'
              'parentsUntil'
              'parseHTML'
              'parseInt'
              'parseJSON'
              'parseXML'
              'password'
              'pipe'
              'position'
              'post'
              'prepend'
              'prependTo'
              'prev'
              'prevAll'
              'preventDefault'
              'prevUntil'
              'progress'
              'promise'
              'prop'
              'proxy'
              'pushStack'
              'queue'
              'radio'
              'ready'
              'reject'
              'rejectWith'
              'relatedTarget'
              'remove'
              'removeAttr'
              'removeClass'
              'removeData'
              'removeProp'
              'replaceAll'
              'replaceWith'
              'reset'
              'resize'
              'resolve'
              'resolved'
              'resolveWith'
              'result'
              'root'
              'scroll'
              'scrollLeft'
              'scrollTop'
              'select'
              'selected'
              'selector'
              'self'
              'serialize'
              'serializeArray'
              'setTimeout'
              'shiftKey'
              'show'
              'siblings'
              'size'
              'slice'
              'slideDown'
              'slideToggle'
              'slideUp'
              'state'
              'stop'
              'stopImmediatePropagation'
              'stopPropagation'
              'sub'
              'submit'
              'support'
              'target'
              'text'
              'then'
              'timeStamp'
              'toArray'
              'toggle'
              'toggleClass'
              'top'
              'trigger'
              'triggerHandler'
              'trim'
              'type'
              'unbind'
              'undelegate'
              'unique'
              'unload'
              'unwrap'
              'val'
              'visible'
              'when'
              'which'
              'width'
              'window'
              'wrap'
              'wrapAll'
              'wrapInner'
            )
            TokenTypes = 4
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'for/if'
        ConditionList = <        
          item
            TagList.Strings = (
              ')'
            )
            TokenTypes = 8
          end        
          item
            CondType = tcSkip
          end        
          item
            TagList.Strings = (
              '('
            )
            TokenTypes = 8
          end        
          item
            TagList.Strings = (
              'for'
              'if'
            )
            TokenTypes = 4
          end>
        NotCollapsed = True
        NameFmt = '%sz0'
        RefToCondEnd = True
        HighlightPos = cpAny
        NoEndRule = True
        IgnoreAsParent = False
      end    
      item
        DisplayName = '{'
        StyleName = 'Current block'
        ConditionList = <        
          item
            TagList.Strings = (
              '{'
            )
            TokenTypes = 8
          end>
        BlockEnd = '}'
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpRange
        DrawStaple = True
        IgnoreAsParent = False
      end    
      item
        DisplayName = '}'
        BlockType = btRangeEnd
        ConditionList = <        
          item
            TagList.Strings = (
              '}'
            )
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'name: function'
        ConditionList = <        
          item
            TagList.Strings = (
              'function'
            )
            TokenTypes = 4
          end        
          item
            TagList.Strings = (
              ':'
            )
            TokenTypes = 8
          end        
          item
            TokenTypes = 4
          end>
        NameFmt = 'function %s0'
        RefToCondEnd = True
        HighlightPos = cpAny
        CancelNextRules = True
        CollapseFmt = 'function %s0'
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'function'
        ConditionList = <        
          item
            TagList.Strings = (
              'function'
            )
            TokenTypes = 4
          end>
        BlockEnd = 'function end'
        EndOfTextClose = True
        NameFmt = '%s0~s[)]'
        RefToCondEnd = True
        HighlightPos = cpBound
        CollapseFmt = '%s0~s[)]'
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'function end'
        BlockName = 'function'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <        
          item
            TagList.Strings = (
              '}'
            )
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end    
      item
        DisplayName = '('
        StyleName = 'Current block'
        ConditionList = <        
          item
            TagList.Strings = (
              '('
            )
            TokenTypes = 8
          end>
        BlockEnd = ')'
        NotCollapsed = True
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpBoundTagBegin
        DynSelectMin = True
        IgnoreAsParent = False
      end    
      item
        DisplayName = ')'
        BlockType = btRangeEnd
        ConditionList = <        
          item
            TagList.Strings = (
              ')'
            )
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end    
      item
        DisplayName = '['
        StyleName = 'Current block'
        ConditionList = <        
          item
            TagList.Strings = (
              '['
            )
            TokenTypes = 8
          end>
        BlockEnd = ']'
        NotCollapsed = True
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpBoundTagBegin
        DynSelectMin = True
        IgnoreAsParent = False
      end    
      item
        DisplayName = ']'
        BlockType = btRangeEnd
        ConditionList = <        
          item
            TagList.Strings = (
              ']'
            )
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'var'
        ConditionList = <        
          item
            TokenTypes = 4
          end        
          item
            TagList.Strings = (
              'var'
            )
            TokenTypes = 4
          end>
        NotCollapsed = True
        NameFmt = '%s0 %s-1'
        HighlightPos = cpAny
        NoEndRule = True
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '//text text'
      'NaN Object $ offset'
      ''
      'function init() {'
      #9'addMenuItem(''Txt'', ''Ctrl+\'''');'
      #9'addMenuItem(''Txt3'', ''Ctrl+Alt+;'');'
      '}'
      ''
      'var s_regex = /^<\/?\w.*?>/gi;'
      '    not_regex = 1 / 2 + (0xFF+10) / 3;'
      '    '
      'findNewEditPoint: function(inc, offset) {'
      #9'return -1'
      '}'
      '    '
      'function SetEnabled(A,count)'
      '{'
      '  for(i= 0; i< count;i++)'
      '    A(i).Enabled = !A(i).Enabled;'
      '}'
      ''
      'function render(){'
      #9#9'$(''#basket'').html('''');'
      #9#9'for (id in basket){'
      #9#9#9'if(basket[id].q>0){'
      #9#9#9#9'b=b+" \'
      #9#9#9#9#9'<div class=''"+cl+"''> \'
      #9#9#9#9#9#9'<td width=''166'' valign=''top''> \'
      #9#9#9#9#9#9#9'"+goods.n+''"...'';'
      ''
      #9#9#9#9'$.cookie(''basketForPHP4'', $.toJSON(basketForPHP4),{path: ''/''});'
      #9#9#9'} else{'
      #9#9#9#9'delete basket[id];'
      #9#9#9'}'
      #9#9'}'
      '}'
    )
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Id'
      'Symbol'
      'String'
      'Number'
    )
    Extentions = 'js'
    LexerName = 'JavaScript'
    Notes.Strings = (
      'Reworked by Alexey (Synwrite)'
      '-tree: added if/for/var'
      '-tree: func params shown'
      '-strings oneline ''...'''
      '-strings multiline "..."'
      '-strings regex /.../gi'
      '-strings heredoc'
      ''
      'Keywords: http://www.w3schools.com/js/js_reserved.asp'
    )
    LineComment = '//'
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal36: TLibSyntAnalyzer
    Formats = <    
      item
        DisplayName = 'Tag id'
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end    
      item
        DisplayName = 'Tag id - underlines'
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        BorderTypeBottom = blWavyLine
        BorderColorBottom = clRed
      end    
      item
        DisplayName = 'Text'
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        BgColor = 14286847
        MultiLineBorder = True
      end    
      item
        DisplayName = 'Tag bound'
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end    
      item
        DisplayName = 'Comment'
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end    
      item
        DisplayName = 'Tag attrib'
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier New'
      end    
      item
        DisplayName = 'Tag attrib - underlines'
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier New'
        BorderTypeBottom = blWavyLine
        BorderColorBottom = clRed
      end    
      item
        DisplayName = 'Tag param'
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
      end    
      item
        DisplayName = 'Unknown tag content'
        Font.Color = clFuchsia
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold, fsUnderline]
      end    
      item
        DisplayName = 'Tag Key'
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
      end    
      item
        DisplayName = 'Number'
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end    
      item
        DisplayName = 'Marked block'
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        BgColor = clHighlight
        FormatType = ftColor
      end    
      item
        DisplayName = 'Tree item (attribute)'
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        BgColor = 14155775
        FormatType = ftColor
      end    
      item
        DisplayName = 'Tree item (tag)'
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
      end    
      item
        DisplayName = 'Current Block'
        Font.Color = clNone
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BgColor = 15400927
        BorderTypeLeft = blSolid
        BorderColorLeft = clGray
        BorderTypeTop = blSolid
        BorderColorTop = clGray
        BorderTypeRight = blSolid
        BorderColorRight = clGray
        BorderTypeBottom = blSolid
        BorderColorBottom = clGray
      end    
      item
        DisplayName = 'Current Tag'
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        BgColor = clSilver
      end    
      item
        DisplayName = 'Sublexer BG'
        Font.Color = clNone
        Font.Height = -13
        Font.Name = 'Courier New'
        BgColor = 14410451
        FormatType = ftBackGround
      end>
    TokenRules = <    
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?ms)<!--.*?(-->|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Comment end'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '-->'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Comment Doctype'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)<!doctype .+? >'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = '<'
        StyleName = 'Tag bound'
        TokenType = 10
        Expression = '<[/!\-%\?]*'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = '>'
        StyleName = 'Tag bound'
        TokenType = 11
        Expression = '[%\?/]?>'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        BlockName = 'Tag begin'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Hex code'
        StyleName = 'Number'
        BlockName = 'Tag begin'
        TokenType = 7
        Expression = '\#[a-f\d]+'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Tag param'
        StyleName = 'Tag param'
        BlockName = 'Tag begin'
        TokenType = 4
        Expression = '(?s) ("|'') (<\?.+?\?>|.)*? (\1|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Tag ident'
        StyleName = 'Tag id - underlines'
        BlockName = 'Tag begin'
        TokenType = 2
        Expression = '[^\s=>/]+'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = '='
        StyleName = 'Tag bound'
        BlockName = 'Tag begin'
        TokenType = 3
        Expression = '='
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Unknow tag content'
        StyleName = 'Unknown tag content'
        BlockName = 'Tag begin'
        Expression = '[^>]*'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = '&...'
        StyleName = 'Tag Key'
        TokenType = 9
        Expression = '&\w+;'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Text'
        StyleName = 'Text'
        TokenType = 9
        Expression = '[^<&]*'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <    
      item
        DisplayName = 'Tag attrib/misc'
        StyleName = 'Tag attrib'
        BlockType = btTagDetect
        ConditionList = <        
          item
            TagList.Strings = (
              'html'
              'nowrap'
              'public'
            )
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'Tag id'
        StyleName = 'Tag id'
        BlockType = btTagDetect
        ConditionList = <        
          item
            TagList.Strings = (
              'a'
              'abbr'
              'acronym'
              'address'
              'applet'
              'area'
              'article'
              'aside'
              'audio'
              'b'
              'base'
              'basefont'
              'bdi'
              'bdo'
              'bgsound'
              'big'
              'blink'
              'blockquote'
              'body'
              'br'
              'button'
              'canvas'
              'caption'
              'center'
              'cite'
              'code'
              'col'
              'colgroup'
              'command'
              'comment'
              'datalist'
              'dd'
              'del'
              'details'
              'dfn'
              'dir'
              'div'
              'dl'
              'doctype'
              'dt'
              'em'
              'embed'
              'fieldset'
              'figcaption'
              'figure'
              'font'
              'footer'
              'form'
              'frame'
              'frameset'
              'h1'
              'h2'
              'h3'
              'h4'
              'h5'
              'h6'
              'head'
              'header'
              'hgroup'
              'hr'
              'html'
              'i'
              'iframe'
              'img'
              'input'
              'ins'
              'isindex'
              'kbd'
              'keygen'
              'label'
              'legend'
              'li'
              'link'
              'main'
              'map'
              'mark'
              'marquee'
              'menu'
              'meta'
              'meter'
              'multicol'
              'nav'
              'nobr'
              'noembed'
              'noframes'
              'noindex'
              'noscript'
              'object'
              'ol'
              'optgroup'
              'option'
              'output'
              'p'
              'param'
              'php'
              'picture'
              'plaintext'
              'pre'
              'progress'
              'q'
              'rp'
              'rt'
              'ruby'
              's'
              'samp'
              'script'
              'section'
              'select'
              'small'
              'source'
              'spacer'
              'span'
              'strike'
              'strong'
              'style'
              'sub'
              'summary'
              'sup'
              'table'
              'tbody'
              'td'
              'textarea'
              'tfoot'
              'th'
              'thead'
              'time'
              'title'
              'tr'
              'track'
              'tt'
              'u'
              'ul'
              'var'
              'video'
              'wbr'
              'xmp'
            )
            TokenTypes = 4
            IgnoreCase = True
          end        
          item
            TagList.Strings = (
              '<'
              '<!'
              '</'
            )
            TokenTypes = 1024
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'Tag attrib incorrect'
        StyleName = 'Tag attrib - underlines'
        BlockType = btTagDetect
        ConditionList = <        
          item
            TagList.Strings = (
              '='
            )
            TokenTypes = 8
          end        
          item
            TokenTypes = 4
          end>
        IdentIndex = 1
        HighlightPos = cpAny
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'Tag attrib'
        StyleName = 'Tag attrib'
        BlockType = btTagDetect
        ConditionList = <        
          item
            TagList.Strings = (
              '='
            )
            TokenTypes = 8
          end        
          item
            TagList.Strings = (
              'abbr'
              'accept'
              'accept-charset'
              'accesskey'
              'action'
              'align'
              'alink'
              'alt'
              'archive'
              'axis'
              'background'
              'behavior'
              'bgcolor'
              'border'
              'cellpadding'
              'cellspacing'
              'char'
              'charoff'
              'charset'
              'checked'
              'cite'
              'class'
              'classid'
              'clear'
              'code'
              'codebase'
              'codetype'
              'color'
              'cols'
              'colspan'
              'compact'
              'content'
              'contenteditable'
              'contextmenu'
              'controls'
              'coords'
              'data'
              'datetime'
              'declare'
              'defer'
              'dir'
              'direction'
              'disabled'
              'doctype'
              'draggable'
              'enctype'
              'equiv'
              'face'
              'for'
              'frame'
              'frameborder'
              'headers'
              'height'
              'hidden'
              'href'
              'hreflang'
              'hspace'
              'html'
              'http-equiv'
              'id'
              'ismap'
              'item'
              'itemprop'
              'kind'
              'label'
              'lang'
              'language'
              'link'
              'longdesc'
              'loop'
              'marginheight'
              'marginwidth'
              'max'
              'maxlength'
              'media'
              'method'
              'min'
              'multiple'
              'name'
              'nohref'
              'noresize'
              'noshade'
              'nowrap'
              'object'
              'onblur'
              'onchange'
              'onclick'
              'ondblclick'
              'onfocus'
              'onkeydown'
              'onkeypress'
              'onkeyup'
              'onload'
              'onmousedown'
              'onmousemove'
              'onmouseout'
              'onmouseover'
              'onmouseup'
              'onreset'
              'onselect'
              'onsubmit'
              'onunload'
              'placeholder'
              'pluginspage'
              'profile'
              'prompt'
              'public'
              'readonly'
              'rel'
              'rev'
              'rows'
              'rowspan'
              'rules'
              'salign'
              'scheme'
              'scope'
              'scrollamount'
              'scrolldelay'
              'scrolling'
              'selected'
              'shape'
              'size'
              'sizes'
              'span'
              'spellcheck'
              'src'
              'srclang'
              'srcset'
              'standby'
              'start'
              'style'
              'subject'
              'summary'
              'tabindex'
              'target'
              'text'
              'title'
              'truespeed'
              'type'
              'usemap'
              'valign'
              'value'
              'valuetype'
              'version'
              'vlink'
              'vspace'
              'width'
              'wmode'
              'xmlns'
            )
            TokenTypes = 4
            IgnoreCase = True
          end>
        IdentIndex = 1
        HighlightPos = cpBound
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'Tag attrib/data'
        StyleName = 'Tag attrib'
        BlockType = btTagDetect
        ConditionList = <        
          item
            TagList.Strings = (
              '='
            )
            TokenTypes = 8
          end        
          item
            TagList.Strings = (
              'data\-\w+'
            )
            CondType = tcMask
            TokenTypes = 4
          end>
        IdentIndex = 1
        HighlightPos = cpAny
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'Tag attrib value'
        StyleName = 'Tag param'
        BlockType = btTagDetect
        ConditionList = <        
          item
            TokenTypes = 20
          end        
          item
            TagList.Strings = (
              '='
            )
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'Tag begin'
        StyleName = 'Current Tag'
        ConditionList = <        
          item
            TokenTypes = 1024
          end>
        BlockEnd = 'Tag end'
        NotCollapsed = True
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'Tag end'
        BlockType = btRangeEnd
        ConditionList = <        
          item
            TokenTypes = 2048
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'Simple tag block'
        ConditionList = <        
          item
            TagList.Strings = (
              'hr'
              'image'
              'img'
              'input'
              'link'
              'meta'
            )
            TokenTypes = 4
            IgnoreCase = True
          end        
          item
            TagList.Strings = (
              '<'
            )
            TokenTypes = 1024
          end>
        BlockEnd = 'Simple tag block end'
        NameFmt = '%s0~s[>]1'
        HighlightPos = cpBound
        TreeItemStyle = 'Tree item (tag)'
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'Simple tag block end'
        BlockName = 'Simple tag block'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <        
          item
            TokenTypes = 2048
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'Tag block begin'
        StyleName = 'Current Block'
        ConditionList = <        
          item
            TagList.Strings = (
              'br'
              'hr'
              'image'
              'img'
              'input'
              'link'
              'meta'
              'source'
            )
            CondType = tcNotEqual
            TokenTypes = 4
            IgnoreCase = True
          end        
          item
            TagList.Strings = (
              '<'
              '<!'
            )
            TokenTypes = 1024
          end>
        BlockEnd = 'Tag block end'
        NameFmt = '%s0~s[>]1'
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        CollapseFmt = '%s0'
        TreeItemStyle = 'Tree item (tag)'
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'Tag block end'
        BlockType = btRangeEnd
        ConditionList = <        
          item
            TokenTypes = 4
            IgnoreCase = True
          end        
          item
            TagList.Strings = (
              '</'
            )
            TokenTypes = 1024
          end>
        SameIdent = True
        HighlightPos = cpBound
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'Comment begin'
        ConditionList = <        
          item
            TokenTypes = 2
          end>
        BlockEnd = 'Comment end'
        DisplayInTree = False
        HighlightPos = cpBound
        CollapseFmt = '<!--  ...  -->'
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'Comment end'
        BlockType = btRangeEnd
        ConditionList = <        
          item
            TokenTypes = 2
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'Tag img begin'
        ConditionList = <        
          item
            TagList.Strings = (
              'img'
            )
            TokenTypes = 4
            IgnoreCase = True
          end        
          item
            TagList.Strings = (
              '<'
            )
            TokenTypes = 1024
          end>
        BlockEnd = 'Tag img end'
        NameFmt = '%s-1~s[>]1'
        GroupFmt = '\Images'
        RefToCondEnd = True
        HighlightPos = cpAny
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'Tag img end'
        BlockType = btRangeEnd
        ConditionList = <        
          item
            TagList.Strings = (
              '>'
              '/>'
            )
            TokenTypes = 2048
          end>
        RefToCondEnd = True
        HighlightPos = cpAny
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'Tag a begin'
        ConditionList = <        
          item
            TagList.Strings = (
              'a'
            )
            TokenTypes = 4
            IgnoreCase = True
          end        
          item
            TagList.Strings = (
              '<'
            )
            TokenTypes = 1024
          end>
        BlockEnd = 'Tag a end'
        NameFmt = '%s-2~s[>]1'
        GroupFmt = '\Links'
        RefToCondEnd = True
        HighlightPos = cpAny
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'Tag a end'
        BlockType = btRangeEnd
        ConditionList = <        
          item
            TagList.Strings = (
              'a'
            )
            TokenTypes = 4
            IgnoreCase = True
          end        
          item
            TagList.Strings = (
              '</'
            )
            TokenTypes = 1024
          end>
        BlockEnd = 'Tag a begin'
        RefToCondEnd = True
        HighlightPos = cpAny
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'Tag form begin'
        ConditionList = <        
          item
            TagList.Strings = (
              'form'
            )
            TokenTypes = 4
            IgnoreCase = True
          end        
          item
            TagList.Strings = (
              '<'
            )
            TokenTypes = 1024
          end>
        BlockEnd = 'Tag form end'
        NameFmt = '%s-1~s[>]1'
        GroupFmt = '\Forms'
        RefToCondEnd = True
        HighlightPos = cpAny
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'Tag form end'
        BlockType = btRangeEnd
        ConditionList = <        
          item
            TagList.Strings = (
              'form'
            )
            TokenTypes = 4
            IgnoreCase = True
          end        
          item
            TagList.Strings = (
              '</'
            )
            TokenTypes = 1024
          end>
        BlockEnd = 'Tag form begin'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'Tag css begin'
        ConditionList = <        
          item
            TagList.Strings = (
              '"stylesheet"'
            )
            TokenTypes = 16
          end        
          item
            TagList.Strings = (
              '='
            )
            TokenTypes = 8
          end        
          item
            TagList.Strings = (
              'rel'
            )
            TokenTypes = 4
            IgnoreCase = True
          end        
          item
            TagList.Strings = (
              'link'
            )
            TokenTypes = 4
            IgnoreCase = True
          end        
          item
            TagList.Strings = (
              '<'
            )
            TokenTypes = 1024
          end>
        BlockEnd = 'Tag css end'
        NameFmt = '%s-1~s[>]1'
        GroupFmt = '\Style sheets'
        RefToCondEnd = True
        HighlightPos = cpAny
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'Tag css end'
        BlockType = btRangeEnd
        ConditionList = <        
          item
            TagList.Strings = (
              '>'
              '/>'
            )
            TokenTypes = 2048
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'attrib id'
        ConditionList = <        
          item
            TokenTypes = 16
          end        
          item
            TagList.Strings = (
              '='
            )
            TokenTypes = 8
          end        
          item
            TagList.Strings = (
              'id'
            )
            TokenTypes = 4
            IgnoreCase = True
          end>
        NameFmt = '%s-2'
        GroupFmt = '\IDs'
        RefToCondEnd = True
        HighlightPos = cpAny
        NoEndRule = True
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'attrib class'
        ConditionList = <        
          item
            TokenTypes = 16
          end        
          item
            TagList.Strings = (
              '='
            )
            TokenTypes = 8
          end        
          item
            TagList.Strings = (
              'class'
            )
            TokenTypes = 4
            IgnoreCase = True
          end>
        NameFmt = '%s-2'
        GroupFmt = '\Classes'
        HighlightPos = cpAny
        NoEndRule = True
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'Tag script begin'
        ConditionList = <        
          item
            TagList.Strings = (
              'script'
            )
            IgnoreCase = True
          end        
          item
            TagList.Strings = (
              '<'
            )
            TokenTypes = 1024
          end>
        BlockEnd = 'Tag script end'
        NameFmt = '%s-1~s[>]1'
        GroupFmt = '\Scripts'
        RefToCondEnd = True
        HighlightPos = cpAny
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'Tag script end'
        BlockType = btRangeEnd
        ConditionList = <        
          item
            TagList.Strings = (
              'script'
            )
            TokenTypes = 4
            IgnoreCase = True
          end        
          item
            TagList.Strings = (
              '</'
            )
            TokenTypes = 1024
          end>
        RefToCondEnd = True
        HighlightPos = cpAny
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <    
      item
        DisplayName = 'CSS'
        StyleName = 'Sublexer BG'
        AlwaysEnabled = True
        StartExpression = '(?si)<style[^>]*>\s*'
        EndExpression = '</style>'
        SyntAnalyzer = SyntAnalyzer10
      end    
      item
        DisplayName = 'VBScript'
        StyleName = 'Sublexer BG'
        AlwaysEnabled = True
        StartExpression = '(?si)<script[^>]*vbscript[^>]*>\s*(<!--)?'
        EndExpression = '(?i)(-->)?\s*</script>'
        SyntAnalyzer = SyntAnal56
      end    
      item
        DisplayName = 'JS'
        StyleName = 'Sublexer BG'
        AlwaysEnabled = True
        StartExpression = '(?si)<script[^>]*javascript[^>]*>\s*(<!--)?'
        EndExpression = '(?i)(//)?(-->)?</script>'
        SyntAnalyzer = SyntAnal38
      end    
      item
        DisplayName = 'JS 2'
        StyleName = 'Sublexer BG'
        StartExpression = '<\s*script\s*>'
        EndExpression = '</\s*script\s*>'
        SyntAnalyzer = SyntAnal38
      end    
      item
        DisplayName = 'ASP'
        StyleName = 'Sublexer BG'
        AlwaysEnabled = True
        StartExpression = '<%'
        EndExpression = '%>'
        SyntAnalyzer = SyntAnal56
      end    
      item
        DisplayName = 'PHP'
        AlwaysEnabled = True
        StartExpression = '(?si)<script[^>]*php[^>]*>\s*(<!--)?'
        EndExpression = '(?i)(-->)?\s*</script>'
        SyntAnalyzer = SyntAnal84
      end    
      item
        DisplayName = 'PHP 2'
        AlwaysEnabled = True
        StartExpression = '(?i)<\?(php)?'
        EndExpression = '\?>'
        SyntAnalyzer = SyntAnal84
      end>
    SampleText.Strings = (
      '<!DOCTYPE html PUBLIC >'
      '<html>'
      '<head>'
      '  <title>HTML page</title>'
      '  <link rel="stylesheet" type="text/css" href="/files/styles.css">'
      '</head>'
      '<body>'
      ''
      '<a href="" hre="" target=_blank data-nnn="test">Test</a>  '
      '<img src="image.png">'
      '<form method="GET" action="search.php">'
      '  <input value="Find" type="submit">'
      '</form>'
      '<br/>'
      ''
      '<h2a>Hello&amp;</h2b>'
      '  <ul>'
      '    <liN> Test'
      '    <li> Test'
      '  </ul>'
      '  '
      '<%if Var then%>'
      '<%end if%>  '
      '  '
      '</body>'
      '</html>'
    )
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Text'
      'Open Tag'
      'Close Tag'
    )
    Extentions = 'htm html htt hta htx htc htd shtml phtml xhtml asp aspx ascx asmx jsp hhc dtd'
    LexerName = 'HTML'
    Notes.Strings = (
      'Reworked by Alex (Synwrite)'
      'Added red underlines for misspelled tags and tag attribs.'
      'Added more tree nodes: Links, Images, Style sheets etc.'
    )
    Charset = DEFAULT_CHARSET
  end
  object SyntAnalyzer10: TLibSyntAnalyzer
    Formats = <    
      item
        DisplayName = 'Style'
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
      end    
      item
        DisplayName = 'Param correct'
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
      end    
      item
        DisplayName = 'Param incorrect'
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        BorderTypeBottom = blWavyLine
        BorderColorBottom = clRed
      end    
      item
        DisplayName = 'Value'
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
      end    
      item
        DisplayName = 'Symbol'
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end    
      item
        DisplayName = 'Comment'
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end    
      item
        DisplayName = 'Current block'
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        BgColor = 16053492
        FormatType = ftBackGround
      end    
      item
        DisplayName = 'Color'
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end    
      item
        DisplayName = 'String'
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
      end    
      item
        DisplayName = 'Number'
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier New'
      end    
      item
        DisplayName = 'StyleSuffix'
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
      end>
    TokenRules = <    
      item
        DisplayName = '{}'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[\{\}]'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '("|'') .*? (\1|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'String in URL'
        StyleName = 'String'
        TokenType = 4
        Expression = '(?<=URL\s*\() .+? (?=\))'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)/\*.*?(\*/|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Param'
        StyleName = 'Param incorrect'
        BlockName = 'Style begin'
        TokenType = 2
        Expression = '[\w\.-]+ (?=\s*\:)'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'StyleSuffix'
        StyleName = 'StyleSuffix'
        BlockName = 'Style begin'
        NotParent = True
        TokenType = 2
        Expression = ':{1,2}\w+'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 5
        Expression = '[;:,%\(\)\[\]@=/\*>\+!\^\$]'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Color'
        StyleName = 'Color'
        BlockName = 'Style begin'
        TokenType = 6
        Expression = '\#[\da-f]+'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Number'
        StyleName = 'Number'
        TokenType = 7
        Expression = '-?\d*\.?\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Value'
        StyleName = 'Value'
        BlockName = 'Style begin'
        TokenType = 2
        Expression = '[\w:\#\.\-]+'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Style'
        StyleName = 'Style'
        TokenType = 2
        Expression = '[\w\#\.\-\+]+'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <    
      item
        DisplayName = 'Known props'
        StyleName = 'Param correct'
        BlockType = btTagDetect
        ConditionList = <        
          item
            TagList.Strings = (
              'accelerator'
              'align-content'
              'align-items'
              'alignment-baseline'
              'align-self'
              'all'
              'animation'
              'animation-delay'
              'animation-direction'
              'animation-duration'
              'animation-fill-mode'
              'animation-iteration-count'
              'animation-name'
              'animation-play-state'
              'animation-timing-function'
              'azimuth'
              'backface-visibility'
              'background'
              'background-attachment'
              'background-blend-mode'
              'background-clip'
              'background-color'
              'background-image'
              'background-origin'
              'background-position'
              'background-position-x'
              'background-position-y'
              'background-repeat'
              'background-repeat-x'
              'background-repeat-y'
              'background-size'
              'baseline-shift'
              'behavior'
              'border'
              'border-bottom'
              'border-bottom-color'
              'border-bottom-left-radius'
              'border-bottom-right-radius'
              'border-bottom-style'
              'border-bottom-width'
              'border-collapse'
              'border-color'
              'border-image'
              'border-image-outset'
              'border-image-repeat'
              'border-image-slice'
              'border-image-source'
              'border-image-width'
              'border-left'
              'border-left-color'
              'border-left-style'
              'border-left-width'
              'border-radius'
              'border-right'
              'border-right-color'
              'border-right-style'
              'border-right-width'
              'border-spacing'
              'border-style'
              'border-top'
              'border-top-color'
              'border-top-left-radius'
              'border-top-right-radius'
              'border-top-style'
              'border-top-width'
              'border-width'
              'bottom'
              'box-decoration-break'
              'box-shadow'
              'box-sizing'
              'break-after'
              'break-before'
              'break-inside'
              'buffered-rendering'
              'caption-side'
              'clear'
              'clip'
              'clip-path'
              'clip-rule'
              'color'
              'color-interpolation'
              'color-interpolation-filters'
              'color-rendering'
              'column-count'
              'column-fill'
              'column-gap'
              'column-rule'
              'column-rule-color'
              'column-rule-style'
              'column-rule-width'
              'columns'
              'column-span'
              'column-width'
              'content'
              'counter-increment'
              'counter-reset'
              'css-float'
              'css-text'
              'cue'
              'cue-after'
              'cue-before'
              'cursor'
              'cx'
              'cy'
              'data'
              'direction'
              'display'
              'dominant-baseline'
              'elevation'
              'empty-cells'
              'enable-background'
              'fill'
              'fill-opacity'
              'fill-rule'
              'filter'
              'flex'
              'flex-basis'
              'flex-direction'
              'flex-flow'
              'flex-grow'
              'flex-shrink'
              'flex-wrap'
              'float'
              'flood-color'
              'flood-opacity'
              'font'
              'font-family'
              'font-feature-settings'
              'font-kerning'
              'font-language-override'
              'font-size'
              'font-size-adjust'
              'font-stretch'
              'font-style'
              'font-synthesis'
              'font-variant'
              'font-variant-alternates'
              'font-variant-caps'
              'font-variant-east-asian'
              'font-variant-ligatures'
              'font-variant-numeric'
              'font-variant-position'
              'font-weight'
              'get-attribute'
              'get-property-cs-svalue'
              'get-property-priority'
              'get-property-value'
              'glyph-orientation-horizontal'
              'glyph-orientation-vertical'
              'height'
              'image-orientation'
              'image-rendering'
              'ime-mode'
              'isolation'
              'item'
              'justify-content'
              'kerning'
              'layout-flow'
              'layout-grid'
              'layout-grid-char'
              'layout-grid-line'
              'layout-grid-mode'
              'layout-grid-type'
              'left'
              'length'
              'letter-spacing'
              'lighting-color'
              'line-break'
              'line-height'
              'list-style'
              'list-style-image'
              'list-style-position'
              'list-style-type'
              'margin'
              'margin-bottom'
              'margin-left'
              'margin-right'
              'margin-top'
              'marker'
              'marker-end'
              'marker-mid'
              'marker-offset'
              'marker-start'
              'marks'
              'mask'
              'mask-type'
              'max-height'
              'max-width'
              'max-zoom'
              'min-height'
              'min-width'
              'min-zoom'
              'mix-blend-mode'
              'nav-down'
              'nav-left'
              'nav-right'
              'nav-up'
              'object-fit'
              'object-position'
              'opacity'
              'order'
              'orientation'
              'orphans'
              'outline'
              'outline-color'
              'outline-offset'
              'outline-style'
              'outline-width'
              'overflow'
              'overflow-wrap'
              'overflow-x'
              'overflow-y'
              'padding'
              'padding-bottom'
              'padding-left'
              'padding-right'
              'padding-top'
              'page'
              'page-break-after'
              'page-break-before'
              'page-break-inside'
              'paint-order'
              'parent-rule'
              'pause'
              'pause-after'
              'pause-before'
              'perspective'
              'perspective-origin'
              'pitch'
              'pitch-range'
              'pixel-bottom'
              'pixel-height'
              'pixel-left'
              'pixel-right'
              'pixel-top'
              'pixel-width'
              'play-during'
              'pointer-events'
              'pos-bottom'
              'pos-height'
              'position'
              'pos-left'
              'pos-right'
              'pos-top'
              'pos-width'
              'quotes'
              'r'
              'remove-attribute'
              'remove-property'
              'resize'
              'richness'
              'right'
              'ruby-align'
              'ruby-overhang'
              'ruby-position'
              'rx'
              'ry'
              'scrollbar3d-light-color'
              'scrollbar-arrow-color'
              'scrollbar-base-color'
              'scrollbar-dark-shadow-color'
              'scrollbar-face-color'
              'scrollbar-highlight-color'
              'scrollbar-shadow-color'
              'scrollbar-track-color'
              'scroll-behavior'
              'set-attribute'
              'set-property'
              'shape-image-threshold'
              'shape-margin'
              'shape-outside'
              'shape-rendering'
              'size'
              'speak'
              'speak-header'
              'speak-numeral'
              'speak-punctuation'
              'speech-rate'
              'src'
              'stop-color'
              'stop-opacity'
              'stress'
              'stroke'
              'stroke-dasharray'
              'stroke-dashoffset'
              'stroke-linecap'
              'stroke-linejoin'
              'stroke-miterlimit'
              'stroke-opacity'
              'stroke-width'
              'style-float'
              'table-layout'
              'tab-size'
              'text-align'
              'text-align-last'
              'text-anchor'
              'text-autospace'
              'text-decoration'
              'text-decoration-blink'
              'text-decoration-color'
              'text-decoration-line'
              'text-decoration-line-through'
              'text-decoration-none'
              'text-decoration-overline'
              'text-decoration-style'
              'text-decoration-underline'
              'text-indent'
              'text-justify'
              'text-justify-trim'
              'text-kashida'
              'text-kashida-space'
              'text-overflow'
              'text-rendering'
              'text-shadow'
              'text-transform'
              'text-underline-position'
              'top'
              'touch-action'
              'transform'
              'transform-origin'
              'transform-style'
              'transition'
              'transition-delay'
              'transition-duration'
              'transition-property'
              'transition-timing-function'
              'unicode-bidi'
              'unicode-range'
              'user-select'
              'user-zoom'
              'vector-effect'
              'vertical-align'
              'visibility'
              'voice-family'
              'volume'
              'white-space'
              'widows'
              'width'
              'will-change'
              'word-break'
              'word-spacing'
              'word-wrap'
              'writing-mode'
              'x'
              'y'
              'z-index'
              'zoom'
            )
            TokenTypes = 4
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'Known vendor prefixes'
        StyleName = 'Param correct'
        BlockType = btTagDetect
        ConditionList = <        
          item
            TagList.Strings = (
              '-apple-dashboard-region'
              '-epub-caption-side'
              '-epub-hyphens'
              '-epub-text-combine'
              '-epub-text-emphasis'
              '-epub-text-emphasis-color'
              '-epub-text-emphasis-style'
              '-epub-text-orientation'
              '-epub-text-transform'
              '-epub-word-break'
              '-epub-writing-mode'
              '-khtml-user-select'
              '-moz-animation'
              '-moz-appearance'
              '-moz-background-inline-policy'
              '-moz-binding'
              '-moz-border-bottom-colors'
              '-moz-border-end'
              '-moz-border-end-color'
              '-moz-border-end-style'
              '-moz-border-end-width'
              '-moz-border-left-colors'
              '-moz-border-radius'
              '-moz-border-right-colors'
              '-moz-border-start'
              '-moz-border-start-color'
              '-moz-border-start-style'
              '-moz-border-start-width'
              '-moz-border-top-colors'
              '-moz-box-align'
              '-moz-box-direction'
              '-moz-box-flex'
              '-moz-box-ordinal-group'
              '-moz-box-orient'
              '-moz-box-pack'
              '-moz-box-shadow'
              '-moz-box-sizing'
              '-moz-column-count'
              '-moz-column-fill'
              '-moz-column-gap'
              '-moz-column-rule'
              '-moz-column-rule-color'
              '-moz-column-rule-style'
              '-moz-column-rule-width'
              '-moz-columns'
              '-moz-column-width'
              '-moz-float-edge'
              '-moz-font-feature-settings'
              '-moz-font-language-override'
              '-moz-force-broken-image-icon'
              '-moz-hyphens'
              '-moz-image-region'
              '-moz-margin-end'
              '-moz-margin-start'
              '-moz-orient'
              '-moz-outline-radius'
              '-moz-outline-radius-bottomleft'
              '-moz-outline-radius-bottomright'
              '-moz-outline-radius-topleft'
              '-moz-outline-radius-topright'
              '-moz-padding-end'
              '-moz-padding-start'
              '-moz-perspective'
              '-moz-script-level'
              '-moz-script-min-size'
              '-moz-script-size-multiplier'
              '-moz-stack-sizing'
              '-moz-tab-size'
              '-moz-text-align-last'
              '-moz-text-blink'
              '-moz-text-decoration-color'
              '-moz-text-decoration-line'
              '-moz-text-decoration-style'
              '-moz-text-size-adjust'
              '-moz-transform'
              '-moz-transition'
              '-moz-transition-delay'
              '-moz-user-focus'
              '-moz-user-input'
              '-moz-user-modify'
              '-moz-user-select'
              '-moz-window-shadow'
              '-ms-accelerator'
              '-ms-animation'
              '-ms-animation-delay'
              '-ms-animation-direction'
              '-ms-animation-duration'
              '-ms-animation-fill-mode'
              '-ms-animation-iteration-count'
              '-ms-animation-name'
              '-ms-animation-play-state'
              '-ms-animation-timing-function'
              '-ms-backface-visibility'
              '-ms-background-position-x'
              '-ms-background-position-y'
              '-ms-behavior'
              '-ms-block-progression'
              '-ms-content-zoom-chaining'
              '-ms-content-zooming'
              '-ms-content-zoom-limit'
              '-ms-content-zoom-limit-max'
              '-ms-content-zoom-limit-min'
              '-ms-content-zoom-snap'
              '-ms-content-zoom-snap-points'
              '-ms-content-zoom-snap-type'
              '-ms-filter'
              '-ms-flex'
              '-ms-flex-align'
              '-ms-flex-direction'
              '-ms-flex-flow'
              '-ms-flex-item-align'
              '-ms-flex-line-pack'
              '-ms-flex-negative'
              '-ms-flex-order'
              '-ms-flex-pack'
              '-ms-flex-positive'
              '-ms-flex-preferred-size'
              '-ms-flex-wrap'
              '-ms-flow-from'
              '-ms-flow-into'
              '-ms-font-feature-settings'
              '-ms-grid-column'
              '-ms-grid-column-align'
              '-ms-grid-columns'
              '-ms-grid-column-span'
              '-ms-grid-row'
              '-ms-grid-row-align'
              '-ms-grid-rows'
              '-ms-grid-row-span'
              '-ms-high-contrast-adjust'
              '-ms-hyphenate-limit-chars'
              '-ms-hyphenate-limit-lines'
              '-ms-hyphenate-limit-zone'
              '-ms-hyphens'
              '-ms-ime-align'
              '-ms-ime-mode'
              '-ms-interpolation-mode'
              '-ms-layout-flow'
              '-ms-layout-grid'
              '-ms-layout-grid-char'
              '-ms-layout-grid-line'
              '-ms-layout-grid-mode'
              '-ms-layout-grid-type'
              '-ms-overflow-style'
              '-ms-overflow-x'
              '-ms-overflow-y'
              '-ms-perspective'
              '-ms-perspective-origin'
              '-ms-progress-appearance'
              '-ms-scrollbar-arrow-color'
              '-ms-scrollbar-base-color'
              '-ms-scrollbar-darkshadow-color'
              '-ms-scrollbar-face-color'
              '-ms-scrollbar-highlight-color'
              '-ms-scrollbar-shadow-color'
              '-ms-scrollbar-track-color'
              '-ms-scroll-chaining'
              '-ms-scroll-limit'
              '-ms-scroll-limit-xmax'
              '-ms-scroll-limit-x-max'
              '-ms-scroll-limit-xmin'
              '-ms-scroll-limit-x-min'
              '-ms-scroll-limit-ymax'
              '-ms-scroll-limit-y-max'
              '-ms-scroll-limit-ymin'
              '-ms-scroll-limit-y-min'
              '-ms-scroll-rails'
              '-ms-scroll-snap-points-x'
              '-ms-scroll-snap-points-y'
              '-ms-scroll-snap-type'
              '-ms-scroll-snap-x'
              '-ms-scroll-snap-y'
              '-ms-scroll-translation'
              '-ms-text-align-last'
              '-ms-text-autospace'
              '-ms-text-combine-horizontal'
              '-ms-text-justify'
              '-ms-text-kashida-space'
              '-ms-text-overflow'
              '-ms-text-size-adjust'
              '-ms-text-underline-position'
              '-ms-touch-action'
              '-ms-touch-select'
              '-ms-transform'
              '-ms-transform-origin'
              '-ms-transform-style'
              '-ms-transition'
              '-ms-transition-delay'
              '-ms-transition-duration'
              '-ms-transition-property'
              '-ms-transition-timing-function'
              '-ms-user-select'
              '-ms-word-break'
              '-ms-word-wrap'
              '-ms-wrap-flow'
              '-ms-wrap-margin'
              '-ms-wrap-through'
              '-ms-writing-mode'
              '-ms-zoom'
              '-o-border-image'
              '-o-device-pixel-ratio'
              '-o-focus-opacity'
              '-o-link'
              '-o-link-source'
              '-o-mini-fold'
              '-o-object-fit'
              '-o-object-position'
              '-o-table-baseline'
              '-o-tab-size'
              '-o-transform'
              '-o-transform-origin'
              '-o-transition'
              '-o-transition-delay'
              '-o-transition-duration'
              '-o-transition-property'
              '-o-transition-timing-function'
              '-o-user-select'
              '-pie-background'
              '-wap-accesskey'
              '-wap-input-format'
              '-wap-input-required'
              '-wap-marquee-dir'
              '-wap-marquee-loop'
              '-wap-marquee-speed'
              '-wap-marquee-style'
              '-webkit-align-content'
              '-webkit-align-items'
              '-webkit-align-self'
              '-webkit-animation'
              '-webkit-animation-delay'
              '-webkit-animation-direction'
              '-webkit-animation-duration'
              '-webkit-animation-fill-mode'
              '-webkit-animation-iteration-count'
              '-webkit-animation-name'
              '-webkit-animation-play-state'
              '-webkit-animation-timing-function'
              '-webkit-appearance'
              '-webkit-app-region'
              '-webkit-aspect-ratio'
              '-webkit-backface-visibility'
              '-webkit-background-blend-mode'
              '-webkit-background-clip'
              '-webkit-background-composite'
              '-webkit-background-origin'
              '-webkit-background-size'
              '-webkit-blend-mode'
              '-webkit-border-after'
              '-webkit-border-after-color'
              '-webkit-border-after-style'
              '-webkit-border-after-width'
              '-webkit-border-before'
              '-webkit-border-before-color'
              '-webkit-border-before-style'
              '-webkit-border-before-width'
              '-webkit-border-bottom-left-radius'
              '-webkit-border-bottom-right-radius'
              '-webkit-border-end'
              '-webkit-border-end-color'
              '-webkit-border-end-style'
              '-webkit-border-end-width'
              '-webkit-border-fit'
              '-webkit-border-horizontal-spacing'
              '-webkit-border-image'
              '-webkit-border-radius'
              '-webkit-border-start'
              '-webkit-border-start-color'
              '-webkit-border-start-style'
              '-webkit-border-start-width'
              '-webkit-border-top-left-radius'
              '-webkit-border-top-right-radius'
              '-webkit-border-vertical-spacing'
              '-webkit-box-align'
              '-webkit-box-decoration-break'
              '-webkit-box-direction'
              '-webkit-box-flex'
              '-webkit-box-flex-group'
              '-webkit-box-lines'
              '-webkit-box-ordinal-group'
              '-webkit-box-orient'
              '-webkit-box-pack'
              '-webkit-box-reflect'
              '-webkit-box-shadow'
              '-webkit-box-sizing'
              '-webkit-clip-path'
              '-webkit-color-correction'
              '-webkit-column-axis'
              '-webkit-column-break-after'
              '-webkit-column-break-before'
              '-webkit-column-break-inside'
              '-webkit-column-count'
              '-webkit-column-gap'
              '-webkit-column-progression'
              '-webkit-column-rule'
              '-webkit-column-rule-color'
              '-webkit-column-rule-style'
              '-webkit-column-rule-width'
              '-webkit-columns'
              '-webkit-column-span'
              '-webkit-column-width'
              '-webkit-cursor-visibility'
              '-webkit-dashboard-region'
              '-webkit-filter'
              '-webkit-flex'
              '-webkit-flex-basis'
              '-webkit-flex-direction'
              '-webkit-flex-flow'
              '-webkit-flex-grow'
              '-webkit-flex-shrink'
              '-webkit-flex-wrap'
              '-webkit-flow-from'
              '-webkit-flow-into'
              '-webkit-font-feature-settings'
              '-webkit-font-kerning'
              '-webkit-font-size-delta'
              '-webkit-font-smoothing'
              '-webkit-font-variant-ligatures'
              '-webkit-grid-after'
              '-webkit-grid-auto-columns'
              '-webkit-grid-auto-flow'
              '-webkit-grid-auto-rows'
              '-webkit-grid-before'
              '-webkit-grid-column'
              '-webkit-grid-columns'
              '-webkit-grid-end'
              '-webkit-grid-row'
              '-webkit-grid-rows'
              '-webkit-grid-start'
              '-webkit-highlight'
              '-webkit-hyphenate-character'
              '-webkit-hyphenate-limit-after'
              '-webkit-hyphenate-limit-before'
              '-webkit-hyphenate-limit-lines'
              '-webkit-justify-content'
              '-webkit-line-align'
              '-webkit-line-box-contain'
              '-webkit-line-break'
              '-webkit-line-clamp'
              '-webkit-line-grid'
              '-webkit-line-snap'
              '-webkit-locale'
              '-webkit-logical-height'
              '-webkit-logical-width'
              '-webkit-margin-after'
              '-webkit-margin-after-collapse'
              '-webkit-margin-before'
              '-webkit-margin-before-collapse'
              '-webkit-margin-bottom-collapse'
              '-webkit-margin-collapse'
              '-webkit-margin-end'
              '-webkit-margin-start'
              '-webkit-margin-top-collapse'
              '-webkit-marquee'
              '-webkit-marquee-direction'
              '-webkit-marquee-increment'
              '-webkit-marquee-repetition'
              '-webkit-marquee-speed'
              '-webkit-marquee-style'
              '-webkit-mask'
              '-webkit-mask-box-image'
              '-webkit-mask-box-image-outset'
              '-webkit-mask-box-image-repeat'
              '-webkit-mask-box-image-slice'
              '-webkit-mask-box-image-source'
              '-webkit-mask-box-image-width'
              '-webkit-mask-clip'
              '-webkit-mask-composite'
              '-webkit-mask-image'
              '-webkit-mask-origin'
              '-webkit-mask-position'
              '-webkit-mask-position-x'
              '-webkit-mask-position-y'
              '-webkit-mask-repeat'
              '-webkit-mask-repeat-x'
              '-webkit-mask-repeat-y'
              '-webkit-mask-size'
              '-webkit-max-logical-height'
              '-webkit-max-logical-width'
              '-webkit-min-logical-height'
              '-webkit-min-logical-width'
              '-webkit-nbsp-mode'
              '-webkit-opacity'
              '-webkit-order'
              '-webkit-overflow-scrolling'
              '-webkit-padding-after'
              '-webkit-padding-before'
              '-webkit-padding-end'
              '-webkit-padding-start'
              '-webkit-perspective'
              '-webkit-perspective-origin'
              '-webkit-perspective-origin-x'
              '-webkit-perspective-origin-y'
              '-webkit-print-color-adjust'
              '-webkit-region-break-after'
              '-webkit-region-break-before'
              '-webkit-region-break-inside'
              '-webkit-region-overflow'
              '-webkit-rtl-ordering'
              '-webkit-ruby-position'
              '-webkit-shape-inside'
              '-webkit-shape-margin'
              '-webkit-shape-outside'
              '-webkit-shape-padding'
              '-webkit-svg-shadow'
              '-webkit-tap-highlight-color'
              '-webkit-text-align-last'
              '-webkit-text-combine'
              '-webkit-text-decoration-color'
              '-webkit-text-decoration-line'
              '-webkit-text-decorations-in-effect'
              '-webkit-text-decoration-style'
              '-webkit-text-emphasis-color'
              '-webkit-text-emphasis-position'
              '-webkit-text-emphasis-style'
              '-webkit-text-fill-color'
              '-webkit-text-orientation'
              '-webkit-text-security'
              '-webkit-text-size-adjust'
              '-webkit-text-stroke'
              '-webkit-text-stroke-color'
              '-webkit-text-stroke-width'
              '-webkit-text-underline-position'
              '-webkit-touch-callout'
              '-webkit-transform'
              '-webkit-transform-origin'
              '-webkit-transform-origin-x'
              '-webkit-transform-origin-y'
              '-webkit-transform-origin-z'
              '-webkit-transform-style'
              '-webkit-transition'
              '-webkit-transition-delay'
              '-webkit-transition-duration'
              '-webkit-transition-property'
              '-webkit-transition-timing-function'
              '-webkit-user-drag'
              '-webkit-user-modify'
              '-webkit-user-select'
              '-webkit-wrap'
              '-webkit-wrap-flow'
              '-webkit-wrap-through'
              '-webkit-writing-mode'
              '-xv-interpret-as'
              '-xv-phonemes'
              '-xv-voice-balance'
              '-xv-voice-duration'
              '-xv-voice-pitch'
              '-xv-voice-pitch-range'
              '-xv-voice-rate'
              '-xv-voice-stress'
              '-xv-voice-volume'
            )
            TokenTypes = 4
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'Style begin'
        StyleName = 'Current block'
        ConditionList = <        
          item
            TagList.Strings = (
              '{'
            )
            TokenTypes = 8
          end>
        BlockEnd = 'Style end'
        Highlight = True
        InvertColors = True
        NameFmt = '%sl1'
        GroupFmt = 'Styles'
        DynHighlight = dhRange
        HighlightPos = cpRange
        DynSelectMin = True
        CollapseFmt = '{ ... }'
        IgnoreAsParent = False
        AutoCloseMode = acmCloseNearest
        AutoCloseText = '}'#13#10
      end    
      item
        DisplayName = 'Style end'
        BlockType = btRangeEnd
        ConditionList = <        
          item
            TagList.Strings = (
              '}'
            )
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'Param to tree'
        ConditionList = <        
          item
            TagList.Strings = (
              ':'
            )
            TokenTypes = 544
          end        
          item
            TagList.Strings = (
              'http'
            )
            CondType = tcNotEqual
            TokenTypes = 4
          end>
        IdentIndex = 1
        BlockOffset = 1
        BlockEnd = 'Param end'
        HighlightPos = cpBound
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'Param end'
        BlockType = btRangeEnd
        ConditionList = <        
          item
            TagList.Strings = (
              ';'
              '}'
            )
            TokenTypes = 40
          end>
        BlockOffset = 1
        DisplayInTree = False
        HighlightPos = cpBound
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'Colors'
        ConditionList = <        
          item
            TokenTypes = 64
          end>
        GroupFmt = '\Colors'
        HighlightPos = cpAny
        NoEndRule = True
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'Images'
        BlockName = 'Style begin'
        ConditionList = <        
          item
            TagList.Strings = (
              '('
            )
            TokenTypes = 32
          end        
          item
            TagList.Strings = (
              'url'
            )
          end>
        BlockEnd = 'Images end'
        NameFmt = '%s-1~s[)]1'
        GroupFmt = '\Images'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'Images end'
        BlockType = btRangeEnd
        ConditionList = <        
          item
            TagList.Strings = (
              ')'
            )
            TokenTypes = 32
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '/* Comment */'
      '.name, .name2 { '
      '  font-size: 18pt; '
      '  color: #000099;'
      '  width: 100%; '
      '  background: url("../img.gif") no-repeat;'
      '  back2: url(http://www.com/url);'
      '  back3: url(../img.gif);'
      '  -ms-zoom: 100%; '
      '  -ms-hmm: test;'
      '}'
      '#footer {color: #AA00BB;}'
    )
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Delimiter'
      'Color'
      'Number'
    )
    Extentions = 'css'
    LexerName = 'CSS'
    Notes.Strings = (
      'Author: Alex (Synwrite)'
      'Added misspelled properties underlining.'
      ''
      'Known properties: http://htmlbook.ru'
      'Known vendor prefixes: http://peter.sh/experiments/vendor-prefixed-css-property-overview/'
    )
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal22: TLibSyntAnalyzer
    Formats = <    
      item
        DisplayName = 'Default'
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        FormatType = ftCustomFont
        FormatFlags = [ffBold, ffItalic, ffUnderline, ffStrikeOut, ffReadOnly, ffHidden]
      end    
      item
        DisplayName = 'Text'
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BorderColorLeft = clGray
        BorderColorTop = clGray
        BorderColorRight = clGray
        BorderColorBottom = clGray
        MultiLineBorder = True
      end    
      item
        DisplayName = 'Tag bound'
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
      end    
      item
        DisplayName = 'Comment'
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end    
      item
        DisplayName = 'CDATA'
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
      end    
      item
        DisplayName = 'Tag Key'
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
      end    
      item
        DisplayName = 'ERROR content'
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end    
      item
        DisplayName = 'Tag ident'
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
      end    
      item
        DisplayName = 'Tag param'
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
      end    
      item
        DisplayName = 'Tag properties'
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
      end    
      item
        DisplayName = 'Current tag'
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        BgColor = 15987699
        FormatType = ftBackGround
      end    
      item
        DisplayName = 'Current Block'
        Font.Color = clNone
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BgColor = 15400927
        BorderTypeLeft = blSolid
        BorderColorLeft = clGray
        BorderTypeTop = blSolid
        BorderColorTop = clGray
        BorderTypeRight = blSolid
        BorderColorRight = clGray
        BorderTypeBottom = blSolid
        BorderColorBottom = clGray
      end    
      item
        DisplayName = 'DTD element type'
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
      end    
      item
        DisplayName = 'DTD bound'
        Font.Color = clPurple
        Font.Height = -19
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end    
      item
        DisplayName = 'Tree item (attribute)'
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        FormatType = ftColor
      end    
      item
        DisplayName = 'Tree item (tag)'
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end>
    TokenRules = <    
      item
        DisplayName = 'XML header'
        StyleName = 'Comment'
        TokenType = 12
        Expression = '(?s)<\?.*?(\?>|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Comment ?xml'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '<\?xml\s.*?\?>'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)<!--.*?(-->|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'CDATA start'
        StyleName = 'CDATA'
        TokenType = 11
        Expression = '<!\[CDATA\['
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'CDATA Text'
        StyleName = 'Text'
        BlockName = 'CDATA begin'
        Expression = '(?s)[^\]]*'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'CDATA end'
        StyleName = 'Tag bound'
        BlockName = 'CDATA begin'
        TokenType = 14
        Expression = '\]\]>'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = '<'
        StyleName = 'Tag bound'
        TokenType = 9
        Expression = '<[/!\-\:\?]*'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = '>'
        StyleName = 'Tag bound'
        TokenType = 10
        Expression = '[/\?]?>'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'DTD Element type'
        StyleName = 'DTD element type'
        BlockName = 'DTD element start'
        TokenType = 2
        Expression = '(?s)\((\(.*?\)|.)*?\)'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'DTD bounds: [ ] '
        StyleName = 'DTD bound'
        BlockName = 'DOCTYPE begin'
        Expression = '[\[\]]'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Tag param'
        StyleName = 'Tag param'
        BlockName = 'Tag begin'
        TokenType = 4
        Expression = '(?s) ("|'').*?(\1|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = '='
        StyleName = 'Tag bound'
        TokenType = 3
        Expression = '='
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Tag ident'
        StyleName = 'Tag ident'
        BlockName = 'Tag begin'
        TokenType = 2
        Expression = '[^>=\?\s/]*'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Error content'
        StyleName = 'ERROR content'
        BlockName = 'Tag begin'
        Expression = '[^>\s]*'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = '&...'
        StyleName = 'Tag Key'
        TokenType = 4
        Expression = '&\w+;'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Text'
        StyleName = 'Text'
        BlockName = 'CDATA begin'
        NotParent = True
        TokenType = 4
        Expression = '[^<&]*'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <    
      item
        DisplayName = 'Tag begin'
        StyleName = 'Current tag'
        ConditionList = <        
          item
            TokenTypes = 512
          end>
        BlockEnd = 'Tag end'
        NotCollapsed = True
        DisplayInTree = False
        DynHighlight = dhRangeNoBound
        HighlightPos = cpRange
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'Tag end'
        BlockType = btRangeEnd
        ConditionList = <        
          item
            TokenTypes = 1024
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'DTD element start'
        ConditionList = <        
          item
            TagList.Strings = (
              'DOCTYPE'
            )
            CondType = tcNotEqual
            TokenTypes = 4
            IgnoreCase = True
          end        
          item
            TagList.Strings = (
              '<!'
            )
            TokenTypes = 512
          end>
        BlockOffset = 1
        BlockEnd = 'DTD element end'
        NameFmt = '%s-1'
        HighlightPos = cpBound
        CollapseFmt = '< %s0 %s-1 >'
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'DTD element end'
        BlockType = btRangeEnd
        ConditionList = <        
          item
            TokenTypes = 1024
          end>
        HighlightPos = cpBound
        CancelNextRules = True
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'DOCTYPE begin'
        ConditionList = <        
          item
            TagList.Strings = (
              'DOCTYPE'
            )
            TokenTypes = 4
            IgnoreCase = True
          end        
          item
            TagList.Strings = (
              '<!'
            )
            TokenTypes = 512
          end>
        BlockOffset = 1
        BlockEnd = 'DOCTYPE end'
        NameFmt = 'Document structure'
        HighlightPos = cpBound
        CollapseFmt = 'Document structure'
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'DOCTYPE end'
        BlockName = 'DOCTYPE begin'
        BlockType = btRangeEnd
        ConditionList = <        
          item
            TagList.Strings = (
              '>'
            )
            TokenTypes = 1024
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'Tag keys'
        StyleName = 'Tag Key'
        BlockType = btTagDetect
        ConditionList = <        
          item
            TokenTypes = 4
          end        
          item
            TokenTypes = 512
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'Tag block begin'
        StyleName = 'Current Block'
        ConditionList = <        
          item
            TokenTypes = 4
          end        
          item
            TagList.Strings = (
              '<'
            )
            TokenTypes = 512
          end>
        BlockEnd = 'Tag block end'
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        CollapseFmt = ' %s0 >'
        TreeItemStyle = 'Tree item (tag)'
        IgnoreAsParent = False
        AutoCloseMode = acmCloseOpened
        AutoCloseText = '</%s0>'
      end    
      item
        DisplayName = 'Tag block end'
        BlockType = btRangeEnd
        ConditionList = <        
          item
            TokenTypes = 4
            IgnoreCase = True
          end        
          item
            TagList.Strings = (
              '</'
            )
            TokenTypes = 512
          end>
        SameIdent = True
        HighlightPos = cpBound
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'End of simple tag'
        BlockType = btRangeEnd
        ConditionList = <        
          item
            TagList.Strings = (
              '/>'
            )
            TokenTypes = 1024
          end>
        BlockEnd = 'Tag block begin'
        HighlightPos = cpBound
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'Comment begin'
        ConditionList = <        
          item
            TokenTypes = 2
          end>
        BlockEnd = 'Comment end'
        DisplayInTree = False
        HighlightPos = cpBound
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'Comment end'
        BlockType = btRangeEnd
        ConditionList = <        
          item
            TokenTypes = 2
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'CDATA end'
        BlockName = 'CDATA begin'
        BlockType = btRangeEnd
        ConditionList = <        
          item
            TokenTypes = 16384
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'CDATA begin'
        ConditionList = <        
          item
            TokenTypes = 2048
          end>
        BlockEnd = 'CDATA end'
        NameFmt = '%s-1'
        HighlightPos = cpBound
        CollapseFmt = 'CDATA'
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'Tag attribute'
        StyleName = 'Tag param'
        BlockName = 'Tag begin'
        ConditionList = <        
          item
            TokenTypes = 16
          end        
          item
            TokenTypes = 8
          end        
          item
            TokenTypes = 4
          end>
        NameFmt = '%s0 %s-1 %s-2'
        RefToCondEnd = True
        HighlightPos = cpBound
        NoEndRule = True
        TreeItemStyle = 'Tree item (attribute)'
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '<?xml version="1.0" encoding="ISO-8859-1" ?>'
      ''
      '<!DOCTYPE web-app ['
      '  <!ELEMENT web-app (icon?, display-name?, description?, distributable?,'
      '  context-param*, filter*, filter-mapping*, listener*, servlet*,'
      '  servlet-mapping*, session-config?, mime-mapping*, welcome-file-list?,'
      '  error-page*, taglib*, resource-env-ref*, resource-ref*, security-constraint*,'
      '  login-config?, security-role*, env-entry*, ejb-ref*,  ejb-local-ref*)>'
      '  <!ELEMENT auth-constraint (description?, role-name*)>'
      '  <!ELEMENT auth-method (#PCDATA)>'
      '  <!ATTLIST exception-type id ID #IMPLIED>'
      ']>'
      ''
      '<web-app>'
      '    <display-name abc="123" def="true"></display-name>'
      '    <description></description>'
      '    <filter-mapping>'
      '        <filter-name></filter-name>'
      '        <url-pattern></url-pattern>'
      '    </filter-mapping>'
      '</web-app>'
    )
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Tag Open'
      'Tag Close'
      'CDATA'
      'XML header'
      'Attrib. value'
      'CDATA end'
    )
    Extentions = 'xml xsl xslt mmpa mmpr sti bdsproj xsd rss wml svg xul xsd axl rdf xaml vcproj dproj plist storyboard msc csproj manifest lpi lpk sublime-snippet tmLanguage jsproj appxmanifest'
    LexerName = 'XML'
    Charset = DEFAULT_CHARSET
    left = 140
    top = 160
  end
  object SyntAnal76: TLibSyntAnalyzer
    Formats = <    
      item
        DisplayName = 'Default'
        Font.CharSet = RUSSIAN_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        FormatType = ftCustomFont
      end    
      item
        DisplayName = 'Section'
        Font.CharSet = RUSSIAN_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end    
      item
        DisplayName = 'Parameter'
        Font.CharSet = RUSSIAN_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
      end    
      item
        DisplayName = 'Value'
        Font.CharSet = RUSSIAN_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
      end    
      item
        DisplayName = 'Symbol'
        Font.CharSet = RUSSIAN_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end    
      item
        DisplayName = 'Comment'
        Font.CharSet = RUSSIAN_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end    
      item
        DisplayName = 'Number'
        Font.CharSet = RUSSIAN_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end>
    TokenRules = <    
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '^[;\#].*$'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Section'
        StyleName = 'Section'
        TokenType = 5
        Expression = '^\[.*?\]'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Key'
        StyleName = 'Parameter'
        TokenType = 2
        Expression = '^[^=\n\r]+'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '='
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Value'
        StyleName = 'Value'
        TokenType = 4
        Expression = '.*$'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <    
      item
        DisplayName = 'Section'
        ConditionList = <        
          item
            TokenTypes = 32
          end>
        EndOfTextClose = True
        NameFmt = '%s0'
        HighlightPos = cpBound
        CollapseFmt = '%s0'
        SelfClose = True
        TreeItemStyle = 'Section'
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'Item'
        ConditionList = <        
          item
            TokenTypes = 8
          end        
          item
            TokenTypes = 4
          end>
        NotCollapsed = True
        NameFmt = '%s0'
        RefToCondEnd = True
        HighlightPos = cpAny
        NoEndRule = True
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '[TT]'
      'aa=test'
      'bb=test'
      ''
      '[TT2]'
      ';tt=2'
      'ww=22'
    )
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Key'
      'Symbol'
      'Value'
      'Section'
    )
    Extentions = 'ini dsk dti dof inf lng srv reg sas cfg'
    LexerName = 'Ini files'
    LineComment = ';'
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal82: TLibSyntAnalyzer
    Formats = <    
      item
        DisplayName = 'Label'
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end    
      item
        DisplayName = 'Comment'
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end    
      item
        DisplayName = 'Key words'
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end    
      item
        DisplayName = 'Commands'
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold, fsUnderline]
      end    
      item
        DisplayName = 'Params'
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
      end    
      item
        DisplayName = 'Echo'
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end    
      item
        DisplayName = 'Symbol'
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end    
      item
        DisplayName = 'QuotationMarks'
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
      end    
      item
        DisplayName = 'Variable'
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end    
      item
        DisplayName = 'Int'
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end>
    TokenRules = <    
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '^\s*@?\s* rem\b .*'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Comment2'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '^\:\:.*'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Label'
        StyleName = 'Label'
        TokenType = 3
        Expression = '^\s*:\w+|(?<=goto\s+)\S+'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Variable'
        StyleName = 'Variable'
        Expression = '%\d | %\w+(%|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'IP-Address'
        StyleName = 'Int'
        Expression = '\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 2
        Expression = '[\+\-\*\(\)\[\]\{\}\<>\.,~!&\|;:=%\^\#]'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'echostd'
        StyleName = 'Echo'
        Expression = '(?<=@?echo)\s+".*'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Echo'
        StyleName = 'Key words'
        TokenType = 5
        Expression = '@?echo(\soff)?\b'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'echo text'
        Enabled = False
        StyleName = 'Echo'
        BlockName = 'echo start'
        StrictParent = True
        TokenType = 4
        Expression = '[^<>\|\n]*[\n]*'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'QuotationMarks'
        StyleName = 'QuotationMarks'
        Expression = '".*?("|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Int'
        StyleName = 'Int'
        Expression = '\b\d+\b'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Command'
        StyleName = 'Params'
        TokenType = 2
        Expression = '\w+'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <    
      item
        DisplayName = 'Key words'
        StyleName = 'Key words'
        BlockType = btTagDetect
        ConditionList = <        
          item
            TagList.Strings = (
              'Arp'
              'Assoc'
              'At'
              'Atmadm'
              'Attrib'
              'Bootcfg'
              'Break'
              'Cacls'
              'call'
              'cd'
              'Change'
              'Chcp'
              'Chdir'
              'Chkdsk'
              'Chkntfs'
              'choice'
              'Cipher'
              'cls'
              'Cmd'
              'Cmstp'
              'Color'
              'Comp'
              'Compact'
              'Convert'
              'copy'
              'Cprofile'
              'CScript'
              'Date'
              'defined'
              'Defrag'
              'del'
              'Dir'
              'Diskcomp'
              'Diskcopy'
              'DiskPart'
              'do'
              'Doskey'
              'Driverquery'
              'echo'
              'echo.'
              'else'
              'Endlocal'
              'errorlevel'
              'Eventcreate'
              'Eventquery'
              'Eventtriggers'
              'Evntcmd'
              'exist'
              'Exit'
              'Expand'
              'Fc'
              'Find'
              'Findstr'
              'Finger'
              'Flattemp'
              'for'
              'Format'
              'Fsutil'
              'Ftp'
              'Ftype'
              'Getmac'
              'goto'
              'Gpresult'
              'Gpupdate'
              'Graftabl'
              'Help'
              'Helpctr'
              'Hostname'
              'if'
              'in'
              'Ipconfig'
              'Ipseccmd'
              'Ipxroute'
              'Irftp'
              'Label'
              'Lodctr'
              'Logman'
              'Lpq'
              'Lpr'
              'Macfile'
              'md'
              'Mkdir'
              'Mmc'
              'Mode'
              'More'
              'Mountvol'
              'Move'
              'MS-DOS'
              'Msiexec'
              'Msinfo32'
              'Nbtstat'
              'Net'
              'Netsh'
              'Netstat'
              'not'
              'Nslookup'
              'Ntbackup'
              'Ntcmdprompt'
              'Ntsd'
              'OOpenfiles'
              'Pagefileconfig'
              'Path'
              'Pathping'
              'pause'
              'Pbadmin'
              'Pentnt'
              'Perfmon'
              'Ping'
              'Popd'
              'Print'
              'Prncnfg'
              'Prndrvr'
              'Prnjobs'
              'Prnmngr'
              'Prnport'
              'Prnqctl'
              'Prompt'
              'Pushd'
              'Query'
              'Rcp'
              'Recover'
              'Reg'
              'Regsvr32'
              'Relog'
              'Rem'
              'Ren'
              'Rename'
              'Replace'
              'Resetsession'
              'Rexec'
              'Rmdir'
              'Route'
              'RRasdial'
              'Rsh'
              'Rsm'
              'Runas'
              'SC'
              'Schtasks'
              'Secedit'
              'set'
              'Setlocal'
              'Sfc'
              'shift'
              'Shutdown'
              'Sort'
              'Start'
              'Subst'
              'sys'
              'Systeminfo'
              'Taskkill'
              'Tasklist'
              'Tcmsetup'
              'TCP/IP'
              'Telnet'
              'Tftp'
              'Time'
              'Title'
              'Tracerpt'
              'Tracert'
              'Tree'
              'Type'
              'Typeperf'
              'Unlodctr'
              'Verify'
              'Vol'
              'Vssadmin'
              'VVer'
              'W32tm'
              'Winnt'
              'Winnt32'
              'WMIC'
              'Xcopy'
            )
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'echo start'
        StyleName = 'Echo'
        ConditionList = <        
          item
            TagList.Strings = (
              'echo'
            )
            TokenTypes = 32
            IgnoreCase = True
          end>
        BlockEnd = 'echo end'
        NotCollapsed = True
        Highlight = True
        DisplayInTree = False
        DynHighlight = dhRange
        HighlightPos = cpBound
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'echo end'
        BlockName = 'echo start'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <        
          item
            TokenTypes = 16
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      'rem Batch file'
      '@echo off'
      'echo Params: %1 %2 %3'
      '@rem'
      '  @rem Comment'
      ':label'
      '::comment'
      'pause'
      'copy c:\%dirname%\*.pas "d:\dir name"'
      'if errorlevel 1 echo Error in copy action!'
      'goto label'
      'ping 10.10.10.100 '
    )
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Label'
      'echo'
      'echo cmd'
    )
    Extentions = 'bat cmd'
    LexerName = 'Batch files'
    SkipSpaces = False
    Notes.Strings = (
      'Changes: Alexey (SynWrite)'
    )
    RestartFromLineStart = True
    LineComment = 'rem '
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal19: TLibSyntAnalyzer
    Formats = <    
      item
        DisplayName = 'Comment'
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end    
      item
        DisplayName = 'Key words'
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end    
      item
        DisplayName = 'Params'
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
      end    
      item
        DisplayName = 'Echo'
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end    
      item
        DisplayName = 'Shebang'
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end    
      item
        DisplayName = 'QuotMarks'
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
      end    
      item
        DisplayName = 'Symbol'
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end    
      item
        DisplayName = 'Variable'
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
      end    
      item
        DisplayName = 'Int'
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end    
      item
        DisplayName = '$(...)'
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        BgColor = clCream
        FormatType = ftBackGround
      end>
    TokenRules = <    
      item
        DisplayName = 'Shebang'
        StyleName = 'Shebang'
        Expression = '\#!.*'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Variable'
        StyleName = 'Variable'
        Expression = '(("|''|'#180'|`)\s*)?(%?\$\w+)\1|%?\$\w+'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Variable2'
        StyleName = 'Variable'
        Expression = '%?\$(\{|\(|\[)\S+(\}|\)|\])'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'IP-Address'
        StyleName = 'QuotMarks'
        Expression = '\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?<![\+\-\*\(\)\[\]\{\}\<>\.,~!&\|;:=%\^\$])\#.*'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'echostd'
        StyleName = 'Echo'
        Expression = '(?<=@?echo)\s+".*?"'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Echo cmd'
        StyleName = 'Key words'
        TokenType = 5
        Expression = '@?echo'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Echo text'
        StyleName = 'Echo'
        BlockName = 'echo start'
        StrictParent = True
        TokenType = 4
        Expression = '[^\#<>\|\n]*[\n]*'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        Expression = '[\+\-\*\(\)\[\]\{\}\<>\.,~!&\|;:=%\^\#\$\?\\]+'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'QuotationMarks'
        StyleName = 'QuotMarks'
        Expression = '("|''|'#180'|`) (\\\1|.)*? \1'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Int'
        StyleName = 'Int'
        Expression = '\b\d+\b'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Command'
        StyleName = 'Params'
        TokenType = 2
        Expression = '\w+'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <    
      item
        DisplayName = 'Key words'
        StyleName = 'Key words'
        BlockType = btTagDetect
        ConditionList = <        
          item
            TagList.Strings = (
              'addgroup'
              'adduser'
              'alias'
              'apropos'
              'apt-get'
              'aptitude'
              'aspell'
              'awk'
              'basename'
              'bash'
              'bc'
              'bg'
              'break'
              'builtin'
              'bzip2'
              'cal'
              'case'
              'cat'
              'cd'
              'cfdisk'
              'chgrp'
              'chkconfig'
              'chmod'
              'chown'
              'chroot'
              'cksum'
              'clear'
              'cmp'
              'comm'
              'command'
              'continue'
              'cp'
              'cron'
              'crontab'
              'csplit'
              'cut'
              'date'
              'dc'
              'dd'
              'ddrescue'
              'declare'
              'df'
              'diff'
              'diff3'
              'dig'
              'dir'
              'dircolors'
              'dirname'
              'dirs'
              'dmesg'
              'do'
              'done'
              'du'
              'echo'
              'egrep'
              'eject'
              'elif'
              'else'
              'enable'
              'env'
              'esac'
              'ethtool'
              'eval'
              'exec'
              'exit'
              'expand'
              'expect'
              'export'
              'expr'
              'false'
              'fdformat'
              'fdisk'
              'fg'
              'fgrep'
              'fi'
              'file'
              'find'
              'fmt'
              'fold'
              'for'
              'format'
              'free'
              'fsck'
              'ftp'
              'function'
              'fuser'
              'gawk'
              'getopts'
              'grep'
              'groups'
              'gzip'
              'halt'
              'hash'
              'head'
              'help'
              'history'
              'hostname'
              'id'
              'if'
              'ifconfig'
              'ifdown'
              'ifup'
              'import'
              'in'
              'init'
              'initlog'
              'insmod'
              'install'
              'jobs'
              'join'
              'kill'
              'killall'
              'less'
              'let'
              'linuxconf'
              'ln'
              'local'
              'locate'
              'logname'
              'logout'
              'look'
              'lpc'
              'lpr'
              'lprint'
              'lprintd'
              'lprintq'
              'lprm'
              'ls'
              'lsmod'
              'lsof'
              'make'
              'man'
              'md'
              'mkdir'
              'mkfifo'
              'mkisofs'
              'mknod'
              'mmv'
              'modprobe'
              'more'
              'mount'
              'mtools'
              'mtr'
              'mv'
              'netstat'
              'nice'
              'nl'
              'nohup'
              'notify-send'
              'nslookup'
              'op'
              'open'
              'passwd'
              'paste'
              'pathchk'
              'pidof'
              'ping'
              'pkill'
              'popd'
              'pr'
              'printcap'
              'printenv'
              'printf'
              'ps'
              'pushd'
              'pwd'
              'quota'
              'quotacheck'
              'quotactl'
              'ram'
              'rcp'
              'rd'
              'read'
              'readarray'
              'readonly'
              'reboot'
              'remsync'
              'rename'
              'renice'
              'return'
              'rev'
              'rm'
              'rmdir'
              'rmmod'
              'route'
              'rsync'
              'scp'
              'screen'
              'sdiff'
              'sed'
              'select'
              'seq'
              'set'
              'sftp'
              'shift'
              'shopt'
              'shutdown'
              'sleep'
              'slocate'
              'sort'
              'source'
              'split'
              'ssh'
              'strace'
              'su'
              'sudo'
              'sum'
              'suspend'
              'symlink'
              'sync'
              'tail'
              'tar'
              'tee'
              'test'
              'then'
              'time'
              'times'
              'top'
              'touch'
              'tr'
              'traceroute'
              'trap'
              'tree'
              'true'
              'tsort'
              'tty'
              'type'
              'ulimit'
              'umask'
              'umount'
              'unalias'
              'uname'
              'unexpand'
              'uniq'
              'units'
              'unset'
              'unshar'
              'until'
              'useradd'
              'usermod'
              'users'
              'usleep'
              'uudecode'
              'uuencode'
              'vdir'
              'vi'
              'vmstat'
              'watch'
              'wc'
              'Wget'
              'whereis'
              'which'
              'while'
              'who'
              'whoami'
              'write'
              'xargs'
              'xdg-open'
              'yes'
              'zcat'
              'zless'
            )
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'echo start'
        StyleName = 'Echo'
        ConditionList = <        
          item
            TagList.Strings = (
              'echo'
            )
            TokenTypes = 32
            IgnoreCase = True
          end>
        BlockEnd = 'echo end'
        NotCollapsed = True
        Highlight = True
        DisplayInTree = False
        DynHighlight = dhRange
        HighlightPos = cpBound
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'echo end'
        BlockName = 'echo start'
        BlockType = btRangeEnd
        ConditionList = <        
          item
            TokenTypes = 16
          end>
        RefToCondEnd = True
        HighlightPos = cpBound
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'func begin'
        ConditionList = <        
          item
            TagList.Strings = (
              'function'
            )
            TokenTypes = 4
          end>
        BlockEnd = '}'
        NameFmt = '%sz0'
        RefToCondEnd = True
        HighlightPos = cpAny
        IgnoreAsParent = False
      end    
      item
        DisplayName = '{'
        ConditionList = <        
          item
            TagList.Strings = (
              '{'
            )
            TokenTypes = 1
          end>
        BlockEnd = '}'
        DisplayInTree = False
        NameFmt = '%sz0'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end    
      item
        DisplayName = '}'
        BlockType = btRangeEnd
        ConditionList = <        
          item
            TagList.Strings = (
              '}'
            )
            TokenTypes = 1
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'case begin'
        ConditionList = <        
          item
            TagList.Strings = (
              'case'
            )
            TokenTypes = 4
          end>
        BlockEnd = 'case end'
        NameFmt = '%sz0'
        HighlightPos = cpAny
        DrawStaple = True
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'case end'
        BlockType = btRangeEnd
        ConditionList = <        
          item
            TagList.Strings = (
              'esac'
            )
            TokenTypes = 4
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'if begin'
        ConditionList = <        
          item
            TagList.Strings = (
              'if'
            )
            TokenTypes = 4
          end>
        BlockEnd = 'if end'
        DisplayInTree = False
        HighlightPos = cpAny
        DrawStaple = True
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'if end'
        BlockType = btRangeEnd
        ConditionList = <        
          item
            TagList.Strings = (
              'fi'
            )
            TokenTypes = 4
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'do begin'
        ConditionList = <        
          item
            TagList.Strings = (
              'do'
            )
            TokenTypes = 4
          end>
        BlockEnd = 'do end'
        NameFmt = '%sz0'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'do end'
        BlockType = btRangeEnd
        ConditionList = <        
          item
            TagList.Strings = (
              'done'
            )
            TokenTypes = 4
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end    
      item
        DisplayName = '$('
        StyleName = '$(...)'
        ConditionList = <        
          item
            TagList.Strings = (
              '$('
            )
            TokenTypes = 1
          end>
        BlockEnd = ')'
        DisplayInTree = False
        RefToCondEnd = True
        DynHighlight = dhRange
        HighlightPos = cpAny
        IgnoreAsParent = False
      end    
      item
        DisplayName = ')'
        BlockType = btRangeEnd
        ConditionList = <        
          item
            TagList.Strings = (
              ')'
            )
            TokenTypes = 1
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end    
      item
        DisplayName = '('
        ConditionList = <        
          item
            TagList.Strings = (
              '('
            )
            TokenTypes = 1
          end>
        BlockEnd = ')'
        DisplayInTree = False
        HighlightPos = cpAny
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      'while read line  # For as many lines as the input file has...'
      'do'
      '  echo "$line"   # Output the line itself.'
      '  test "test\"test"'
      '  len=${#line} $(text here)'
      '  if [[ "$len" -lt "$MINLEN" && "$line" =~ \[*\.\] ]]'
      '    then echo    #  Add a blank line immediately'
      '  fi             #+ after short line terminated by a period.'
      'done'
    )
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Label'
      'echo text'
      'echo cmd'
    )
    Extentions = 'sh csh bash'
    LexerName = 'Bash script'
    SkipSpaces = False
    Notes.Strings = (
      'Author: Matthias Eberhardt (SynWrite admin)'
      'Improvements: Alexey (SynWrite)'
    )
    RestartFromLineStart = True
    LineComment = '#'
    Charset = DEFAULT_CHARSET
    left = 144
    top = 184
  end
  object SyntAnal88: TLibSyntAnalyzer
    Formats = <    
      item
        DisplayName = 'Default'
        Font.CharSet = RUSSIAN_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        FormatType = ftCustomFont
        FormatFlags = [ffBold, ffItalic, ffUnderline, ffStrikeOut, ffReadOnly, ffHidden]
      end    
      item
        DisplayName = 'Symbol'
        Font.CharSet = RUSSIAN_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end    
      item
        DisplayName = 'Number'
        Font.CharSet = RUSSIAN_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end    
      item
        DisplayName = 'String'
        Font.CharSet = RUSSIAN_CHARSET
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
      end    
      item
        DisplayName = 'Identifier'
        Font.CharSet = RUSSIAN_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
      end    
      item
        DisplayName = 'Reserved word'
        Font.CharSet = RUSSIAN_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end    
      item
        DisplayName = 'Comment'
        Font.CharSet = RUSSIAN_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end    
      item
        DisplayName = 'Preprocessor'
        Font.CharSet = RUSSIAN_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end    
      item
        DisplayName = 'Assembler'
        Font.CharSet = RUSSIAN_CHARSET
        Font.Color = clNone
        Font.Height = -13
        Font.Name = 'Courier New'
        BgColor = 15724510
        FormatType = ftBackGround
      end    
      item
        DisplayName = 'Marked block'
        Font.CharSet = RUSSIAN_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        BgColor = clHighlight
        FormatType = ftColor
        BorderColorLeft = clRed
        BorderColorTop = clRed
        BorderColorRight = clRed
        BorderColorBottom = clRed
        MultiLineBorder = True
      end    
      item
        DisplayName = 'Interface section'
        Font.CharSet = RUSSIAN_CHARSET
        Font.Color = clHighlight
        Font.Height = -13
        Font.Name = 'Courier New'
        BgColor = 15269887
        FormatType = ftBackGround
      end    
      item
        DisplayName = 'Implemenation Section'
        Font.CharSet = RUSSIAN_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        BgColor = 16121842
        FormatType = ftBackGround
      end    
      item
        DisplayName = 'Function separator'
        Font.CharSet = RUSSIAN_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        BgColor = clLime
        FormatType = ftBackGround
        FormatFlags = [ffBold, ffItalic, ffUnderline, ffStrikeOut, ffReadOnly, ffHidden]
      end    
      item
        DisplayName = 'Current block'
        Font.CharSet = RUSSIAN_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BgColor = 13369046
        FormatType = ftColor
        BorderTypeLeft = blSolid
        BorderColorLeft = clGray
        BorderTypeTop = blSolid
        BorderColorTop = clGray
        BorderTypeRight = blSolid
        BorderColorRight = clGray
        BorderTypeBottom = blSolid
        BorderColorBottom = clGray
      end    
      item
        DisplayName = 'Current function'
        Font.CharSet = RUSSIAN_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        BgColor = 16776187
        FormatType = ftBackGround
        MultiLineBorder = True
      end    
      item
        DisplayName = 'Current Line'
        Font.CharSet = RUSSIAN_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        BgColor = 16772341
        FormatType = ftBackGround
      end    
      item
        DisplayName = 'Search Match'
        Font.Color = clWindow
        Font.Height = -16
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BgColor = clBlack
      end    
      item
        DisplayName = 'Group (tree)'
        Font.CharSet = RUSSIAN_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Times New Roman'
        Font.Style = [fsBold, fsItalic]
      end    
      item
        DisplayName = 'Intern. function (tree)'
        Font.CharSet = RUSSIAN_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
      end    
      item
        DisplayName = 'class (tree)'
        Font.CharSet = RUSSIAN_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end    
      item
        DisplayName = 'Invalid symbol'
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsStrikeOut]
        BgColor = clYellow
      end    
      item
        DisplayName = 'Id exit'
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier New'
      end>
    TokenRules = <    
      item
        DisplayName = 'Id'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '''.*?(''|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = '(\d+ \.)? \d+ e [\+\-]? \d+ | \d+ \. \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Preprocessor 1'
        StyleName = 'Preprocessor'
        AlwaysEnabled = True
        TokenType = 9
        Expression = '\{\$.*?\}'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Preprocessor 2'
        StyleName = 'Preprocessor'
        AlwaysEnabled = True
        TokenType = 9
        Expression = '\(\*\$.*?\*\)'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Comment 1'
        StyleName = 'Comment'
        AlwaysEnabled = True
        TokenType = 1
        Expression = '(?s)\(\*.*?(\*\)|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Comment 2'
        StyleName = 'Comment'
        AlwaysEnabled = True
        TokenType = 1
        Expression = '(?s)\{.*?(\}|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Comment 3'
        StyleName = 'Comment'
        AlwaysEnabled = True
        TokenType = 1
        Expression = '//.*'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Hex'
        StyleName = 'Number'
        TokenType = 7
        Expression = '\$[a-f\d]+'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/\*,\.;:\(\)=<>\+\-\[\]\^@]'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Char'
        StyleName = 'String'
        TokenType = 8
        Expression = '\#(\d+|\$[\da-f]+)'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Invalid symbol'
        StyleName = 'Invalid symbol'
        Expression = '.'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <    
      item
        DisplayName = 'Id keywords'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <        
          item
            TagList.Strings = (
              'absolute'
              'abstract'
              'and'
              'array'
              'as'
              'asm'
              'begin'
              'case'
              'cdecl'
              'class'
              'const'
              'constructor'
              'contains'
              'default'
              'destructor'
              'dispinterface'
              'div'
              'do'
              'downto'
              'dynamic'
              'else'
              'end'
              'except'
              'exports'
              'external'
              'file'
              'finalization'
              'finally'
              'for'
              'function'
              'generic'
              'goto'
              'if'
              'implementation'
              'in'
              'inherited'
              'initialization'
              'inline'
              'interface'
              'is'
              'label'
              'library'
              'mod'
              'nil'
              'not'
              'object'
              'of'
              'or'
              'out'
              'overload'
              'override'
              'package'
              'packed'
              'pascal'
              'private'
              'procedure'
              'program'
              'property'
              'protected'
              'public'
              'published'
              'raise'
              'read'
              'record'
              'register'
              'repeat'
              'requires'
              'resourcestring'
              'safecall'
              'self'
              'set'
              'shl'
              'shr'
              'specialize'
              'stdcall'
              'strict'
              'string'
              'then'
              'threadvar'
              'to'
              'try'
              'type'
              'unit'
              'until'
              'uses'
              'var'
              'virtual'
              'while'
              'with'
              'write'
              'xor'
            )
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'Id exit'
        StyleName = 'Id exit'
        BlockType = btTagDetect
        ConditionList = <        
          item
            TagList.Strings = (
              'Exit'
              'Halt'
              'Result'
            )
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'Forward'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <        
          item
            TagList.Strings = (
              'forward'
            )
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        TokenType = 10
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'Block comment'
        BlockName = 'Block comment'
        NotParent = True
        AlwaysEnabled = True
        ConditionList = <        
          item
            TokenTypes = 2
          end>
        BlockEnd = 'Block comment end'
        DisplayInTree = False
        HighlightPos = cpBound
        CollapseFmt = '{ ... }'
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'Block comment end'
        BlockName = 'Block comment'
        StrictParent = True
        AlwaysEnabled = True
        BlockType = btRangeEnd
        ConditionList = <        
          item
            CondType = tcNotEqual
            TokenTypes = 2
          end        
          item
            TokenTypes = 2
          end>
        BlockOffset = 1
        HighlightPos = cpBound
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'try'
        StyleName = 'Current block'
        ConditionList = <        
          item
            TagList.Strings = (
              'try'
            )
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'End'
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        DrawStaple = True
        CollapseFmt = '%s0 ...'
        IgnoreAsParent = False
        AutoCloseMode = acmCloseNearest
        AutoCloseText = 'finally'#13#10#13#10'end;'
      end    
      item
        DisplayName = 'begin'
        StyleName = 'Current block'
        ConditionList = <        
          item
            TagList.Strings = (
              'begin'
              'case'
            )
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'End'
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        DrawStaple = True
        CollapseFmt = '%s0 ...'
        IgnoreAsParent = False
        AutoCloseMode = acmCloseNearest
        AutoCloseText = 'end;'
      end    
      item
        DisplayName = 'End'
        BlockType = btRangeEnd
        ConditionList = <        
          item
            TagList.Strings = (
              'end'
            )
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'asm'
        StyleName = 'Assembler'
        ConditionList = <        
          item
            TagList.Strings = (
              'asm'
            )
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'End'
        Highlight = True
        InvertColors = True
        DisplayInTree = False
        DynHighlight = dhRangeNoBound
        HighlightPos = cpAny
        CollapseFmt = 'ASM'
        IgnoreAsParent = False
        AutoCloseMode = acmCloseNearest
        AutoCloseText = 'end;'
      end    
      item
        DisplayName = '{$ifdef}'
        ConditionList = <        
          item
            TagList.Strings = (
              '\{\$if[n]?def'
            )
            CondType = tcMask
            TokenTypes = 512
            IgnoreCase = True
          end>
        BlockEnd = '{$endif}'
        DisplayInTree = False
        HighlightPos = cpBound
        CollapseFmt = '%s0'
        IgnoreAsParent = True
        AutoCloseMode = acmCloseNearest
        AutoCloseText = '{$ENDIF}'
      end    
      item
        DisplayName = '{$endif}'
        BlockType = btRangeEnd
        ConditionList = <        
          item
            TagList.Strings = (
              '\{\$endif'
            )
            CondType = tcMask
            TokenTypes = 512
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'until'
        BlockType = btRangeEnd
        ConditionList = <        
          item
            TagList.Strings = (
              'until'
            )
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'repeat'
        ConditionList = <        
          item
            TagList.Strings = (
              'repeat'
            )
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'until'
        DisplayInTree = False
        HighlightPos = cpBound
        DrawStaple = True
        CollapseFmt = 'repeat ...'
        IgnoreAsParent = False
        AutoCloseMode = acmCloseNearest
        AutoCloseText = 'until ;'
      end    
      item
        DisplayName = 'program'
        ConditionList = <        
          item
            TagList.Strings = (
              'library'
              'program'
              'unit'
            )
            TokenTypes = 4
            IgnoreCase = True
          end>
        IdentIndex = -1
        BlockEnd = 'Unit end'
        EndOfTextClose = True
        HighlightPos = cpBound
        CollapseFmt = '%s0 %s-1'
        TreeItemImage = 0
        IgnoreAsParent = False
        AutoCloseMode = acmCloseOpened
        AutoCloseText = 'end.'
      end    
      item
        DisplayName = 'class declaration'
        BlockName = 'class declaration'
        NotParent = True
        StatesAdd = 8
        ConditionList = <>
        BlockEnd = 'end of type'
        NameFmt = '%s-2 %s0'
        GroupFmt = 'classes'
        RefToCondEnd = True
        HighlightPos = cpBound
        CollapseFmt = '%s-2 %s0'
        GrammaRuleName = 'ClassDecl'
        TreeItemStyle = 'class (tree)'
        TreeGroupStyle = 'Group (tree)'
        TreeItemImage = 1
        TreeGroupImage = 0
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'class-object declaration'
        ConditionList = <>
        BlockEnd = 'end of type'
        NameFmt = 'class %s0'
        GroupFmt = 'classes'
        RefToCondEnd = True
        HighlightPos = cpAny
        CollapseFmt = 'class %s0'
        GrammaRuleName = 'ObjectDecl'
        TreeItemStyle = 'class (tree)'
        TreeGroupStyle = 'Group (tree)'
        TreeItemImage = 1
        TreeGroupImage = 0
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'generic declaration'
        ConditionList = <>
        BlockEnd = 'end of type'
        NameFmt = 'class %s-1'
        GroupFmt = 'classes'
        RefToCondEnd = True
        HighlightPos = cpAny
        CollapseFmt = 'class %s-1'
        GrammaRuleName = 'GenericDecl'
        TreeItemStyle = 'class (tree)'
        TreeGroupStyle = 'Group (tree)'
        TreeItemImage = 1
        TreeGroupImage = 0
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'Empty class'
        ConditionList = <>
        NotCollapsed = True
        NameFmt = '%s-2 %s0'
        RefToCondEnd = True
        HighlightPos = cpBound
        CollapseFmt = '%s-2 %s0'
        NoEndRule = True
        GrammaRuleName = 'EmptyClass'
        TreeItemImage = 4
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'Interface declaration'
        BlockName = 'Interface declaration'
        NotParent = True
        StatesAdd = 8
        ConditionList = <>
        BlockEnd = 'end of type'
        NameFmt = '%s-2 %s0'
        GroupFmt = 'Interfaces'
        RefToCondEnd = True
        HighlightPos = cpBound
        CollapseFmt = '%s-2 %s0'
        GrammaRuleName = 'IntfDecl'
        TreeGroupStyle = 'Group (tree)'
        TreeItemImage = 2
        TreeGroupImage = 0
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'record'
        StatesAdd = 8
        ConditionList = <        
          item
            TagList.Strings = (
              'record'
            )
            TokenTypes = 4
            IgnoreCase = True
          end        
          item
            TagList.Strings = (
              'packed'
            )
            CondType = tcSkip
            TokenTypes = 4
            IgnoreCase = True
          end        
          item
            TagList.Strings = (
              '='
            )
            TokenTypes = 8
          end        
          item
            TokenTypes = 4
          end>
        BlockEnd = 'end of type'
        NameFmt = 'record %s0'
        GroupFmt = 'Types'
        RefToCondEnd = True
        HighlightPos = cpBound
        CollapseFmt = 'record %s0'
        TreeGroupStyle = 'Group (tree)'
        TreeItemImage = 3
        TreeGroupImage = 0
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'Interface section'
        BlockName = 'program'
        StrictParent = True
        StatesAdd = 1
        ConditionList = <        
          item
            TagList.Strings = (
              'interface'
            )
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'Interface section end'
        EndOfTextClose = True
        Highlight = True
        DisplayInTree = False
        NameFmt = 'Interface section'
        DynHighlight = dhRange
        HighlightPos = cpAny
        CollapseFmt = 'Interface section'
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'Interface section end'
        BlockType = btRangeEnd
        ConditionList = <        
          item
            TagList.Strings = (
              'implementation'
            )
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockOffset = 1
        HighlightPos = cpBound
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'Implementation section'
        StatesAdd = 2
        StatesRemove = 15
        ConditionList = <        
          item
            TagList.Strings = (
              'implementation'
            )
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'Unit end'
        EndOfTextClose = True
        Highlight = True
        DisplayInTree = False
        DynHighlight = dhRange
        HighlightPos = cpAny
        CollapseFmt = 'Implementation section'
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'finalization'
        ConditionList = <        
          item
            TagList.Strings = (
              'finalization'
            )
            TokenTypes = 4
            IgnoreCase = True
          end>
        EndOfTextClose = True
        DisplayInTree = False
        HighlightPos = cpBound
        CollapseFmt = '%s0'
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'Unit end'
        BlockType = btRangeEnd
        ConditionList = <        
          item
            TagList.Strings = (
              '.'
            )
            TokenTypes = 8
          end        
          item
            TagList.Strings = (
              'end'
            )
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockOffset = 2
        HighlightPos = cpBound
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'Function separator'
        StyleName = 'Function separator'
        StatesPresent = 2
        StatesAbsent = 24
        BlockType = btLineBreak
        ConditionList = <        
          item
            TagList.Strings = (
              'constructor'
              'destructor'
              'function'
              'procedure'
            )
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'Internal function'
        BlockName = 'function of class'
        ConditionList = <        
          item
            TokenTypes = 4
          end        
          item
            TagList.Strings = (
              'function'
              'procedure'
            )
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockOffset = 1
        BlockEnd = 'End of internal'
        HighlightPos = cpBound
        CollapseFmt = '%s1 %s0'
        TreeItemStyle = 'Intern. function (tree)'
        TreeItemImage = 5
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'End of internal'
        BlockName = 'Internal function'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <        
          item
            TagList.Strings = (
              ';'
            )
            TokenTypes = 8
          end        
          item
            TagList.Strings = (
              'end'
              'forward'
            )
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        CancelNextRules = True
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'forward_func'
        StatesAbsent = 1
        BlockType = btRangeEnd
        ConditionList = <        
          item
            TokenTypes = 1024
            IgnoreCase = True
          end>
        BlockEnd = 'Single function'
        HighlightPos = cpBound
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'Single function'
        StyleName = 'Current function'
        BlockName = 'Implementation section'
        StrictParent = True
        StatesAdd = 16
        ConditionList = <        
          item
            TagList.Strings = (
              ';'
              ':'
              '('
            )
            TokenTypes = 8
          end        
          item
            TokenTypes = 4
          end        
          item
            TagList.Strings = (
              'function'
              'procedure'
            )
            TokenTypes = 4
            IgnoreCase = True
          end>
        IdentIndex = 1
        BlockOffset = 2
        BlockEnd = 'End of function'
        Highlight = True
        NameFmt = '%s2 %s1'
        GroupFmt = 'Functions'
        DynHighlight = dhRange
        HighlightPos = cpRange
        CollapseFmt = '%s2 %s1'
        TreeGroupStyle = 'Group (tree)'
        TreeItemImage = 5
        TreeGroupImage = 0
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'End of function'
        BlockName = 'Single function'
        StrictParent = True
        StatesRemove = 16
        BlockType = btRangeEnd
        ConditionList = <        
          item
            TagList.Strings = (
              ';'
            )
            TokenTypes = 1032
          end        
          item
            TagList.Strings = (
              'end'
              'forward'
            )
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        CancelNextRules = True
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'function of class'
        StyleName = 'Current function'
        StatesAdd = 16
        StatesPresent = 2
        ConditionList = <        
          item
            TagList.Strings = (
              '.'
            )
            TokenTypes = 8
          end        
          item
            TokenTypes = 4
          end        
          item
            TagList.Strings = (
              'constructor'
              'destructor'
              'function'
              'procedure'
            )
            TokenTypes = 4
            IgnoreCase = True
          end>
        IdentIndex = -1
        BlockOffset = 2
        BlockEnd = 'End of class function'
        Highlight = True
        NameFmt = '%s-1'
        GroupFmt = 'classes\class %s1'
        DynHighlight = dhRange
        HighlightPos = cpRange
        CollapseFmt = '%s2 %s1%s0%s-1'
        TreeItemImage = 6
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'End of class function'
        BlockName = 'function of class'
        StrictParent = True
        StatesRemove = 16
        BlockType = btRangeEnd
        ConditionList = <        
          item
            TagList.Strings = (
              ';'
            )
            TokenTypes = 8
          end        
          item
            TagList.Strings = (
              'end'
            )
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'Internal function 2'
        BlockName = 'Single function'
        ConditionList = <        
          item
            TokenTypes = 4
          end        
          item
            TagList.Strings = (
              'function'
              'procedure'
            )
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockOffset = 1
        BlockEnd = 'End of internal 2'
        HighlightPos = cpBound
        CollapseFmt = '%s0 %s-1'
        TreeItemStyle = 'Intern. function (tree)'
        TreeItemImage = 5
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'End of internal 2'
        BlockName = 'Internal function 2'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <        
          item
            TagList.Strings = (
              ';'
            )
          end        
          item
            TagList.Strings = (
              'end'
              'forward'
            )
            TokenTypes = 1028
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'end of type'
        StatesRemove = 8
        BlockType = btRangeEnd
        ConditionList = <        
          item
            TagList.Strings = (
              ';'
            )
            TokenTypes = 8
          end        
          item
            TagList.Strings = (
              'end'
            )
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        CancelNextRules = True
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'Enum'
        BlockName = 'Interface section'
        ConditionList = <        
          item
            TagList.Strings = (
              '('
            )
            TokenTypes = 8
          end        
          item
            TagList.Strings = (
              '='
            )
            TokenTypes = 8
          end        
          item
            TokenTypes = 4
          end        
          item
            TagList.Strings = (
              ';'
              '.'
              'type'
            )
            CondType = tcMask
            TokenTypes = 14
          end>
        IdentIndex = 2
        BlockOffset = 2
        BlockEnd = 'Enum end'
        NameFmt = 'enum %s2'
        GroupFmt = 'Types'
        HighlightPos = cpBound
        CollapseFmt = 'enum %s2 ...'
        TreeItemImage = 3
        TreeGroupImage = 0
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'Set'
        ConditionList = <        
          item
            TagList.Strings = (
              'set'
            )
            TokenTypes = 4
            IgnoreCase = True
          end        
          item
            TagList.Strings = (
              '='
            )
            TokenTypes = 8
          end        
          item
            TokenTypes = 4
          end>
        BlockEnd = ';'
        NameFmt = 'set %s0'
        GroupFmt = 'Types'
        RefToCondEnd = True
        HighlightPos = cpBound
        TreeItemImage = 3
        TreeGroupImage = 0
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'unit'
        BlockName = 'Uses'
        StrictParent = True
        ConditionList = <        
          item
            TokenTypes = 4
          end>
        BlockEnd = 'unit end'
        NotCollapsed = True
        NameFmt = '%s0~e1'
        HighlightPos = cpBound
        TreeItemImage = 2
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'unit end'
        BlockType = btRangeEnd
        ConditionList = <        
          item
            TagList.Strings = (
              ','
              ';'
            )
            TokenTypes = 8
          end>
        BlockOffset = 1
        HighlightPos = cpAny
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'Uses'
        ConditionList = <        
          item
            TagList.Strings = (
              'uses'
            )
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = ';'
        HighlightPos = cpBound
        CollapseFmt = 'uses ...'
        TreeItemImage = 0
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'Enum end'
        BlockName = 'Enum'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <        
          item
            TagList.Strings = (
              ';'
            )
            TokenTypes = 8
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end    
      item
        DisplayName = ';'
        BlockType = btRangeEnd
        ConditionList = <        
          item
            TagList.Strings = (
              ';'
            )
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'REGION'
        ConditionList = <        
          item
            TagList.Strings = (
              '\{\$REGION'
            )
            CondType = tcMask
            TokenTypes = 512
            IgnoreCase = True
          end>
        BlockEnd = 'REGION END'
        DisplayInTree = False
        HighlightPos = cpAny
        DrawStaple = True
        CollapseFmt = '%s0'
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'REGION END'
        BlockType = btRangeEnd
        ConditionList = <        
          item
            TagList.Strings = (
              '\{\$ENDREGION'
            )
            CondType = tcMask
            TokenTypes = 512
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end    
      item
        DisplayName = '('
        StyleName = 'Current block'
        ConditionList = <        
          item
            TagList.Strings = (
              '('
            )
            TokenTypes = 8
          end>
        BlockEnd = ')'
        NotCollapsed = True
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpBoundTagBegin
        DynSelectMin = True
        IgnoreAsParent = False
      end    
      item
        DisplayName = ')'
        BlockType = btRangeEnd
        ConditionList = <        
          item
            TagList.Strings = (
              ')'
            )
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        CancelNextRules = True
        IgnoreAsParent = False
      end    
      item
        DisplayName = '['
        StyleName = 'Current block'
        ConditionList = <        
          item
            TagList.Strings = (
              '['
            )
            TokenTypes = 8
          end>
        BlockEnd = ']'
        NotCollapsed = True
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpBoundTagBegin
        DynSelectMin = True
        IgnoreAsParent = False
      end    
      item
        DisplayName = ']'
        BlockType = btRangeEnd
        ConditionList = <        
          item
            TagList.Strings = (
              ']'
            )
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        CancelNextRules = True
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'Function out of all'
        BlockName = 'program'
        StrictParent = True
        ConditionList = <        
          item
            TokenTypes = 4
          end        
          item
            TagList.Strings = (
              'function'
              'procedure'
            )
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'End of Func out of all'
        NameFmt = '%s0 %s-1'
        GroupFmt = 'Functions'
        RefToCondEnd = True
        HighlightPos = cpAny
        TreeItemImage = 5
        TreeGroupImage = 0
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'End of Func out of all'
        BlockName = 'Function out of all'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <        
          item
            TagList.Strings = (
              ';'
            )
            TokenTypes = 8
          end        
          item
            TagList.Strings = (
              'end'
            )
            TokenTypes = 4
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'Invalid close bracket'
        StyleName = 'Invalid symbol'
        BlockType = btTagDetect
        ConditionList = <        
          item
            TagList.Strings = (
              ')'
              ']'
            )
            TokenTypes = 8
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <    
      item
        DisplayName = 'asm section'
        StartExpression = 'asm\b'
        EndExpression = 'end'
        SyntAnalyzer = SyntAnalyzer13
      end>
    SampleText.Strings = (
      'unit Test;    '
      ''
      'interface'
      ''
      'uses aa.aa, bb, cc.cc.cc;                          '
      ''
      'const'
      '  cColorCodes: array[0..1] of TColorCode = ('
      '    (sName: ''AliceBlue''; sVal: ''#00''),'
      '    (sName: ''AntiqueWhite''; sVal: ''#00''),'
      '    );'
      '    '
      'type                        '
      '  TForm1 = class(TForm)    '
      '    procedure Button1Click(Sender: TObject);'
      '  end;                             '
      '                   '
      'implementation                                      '
      '                                                                       '
      '{Syntax highlighting}  '
      'procedure TForm1.Button1Click(Sender: TObject);'
      'var'
      ' Number: integer;'
      ' FloatNumber: double;'
      'begin'
      ' Number := 10 + 1.2e-3 + $eb;'
      ' Caption := ''Number is '' + IntToStr(Number);'
      ' Result := Number;'
      ' if Result>1 then Exit;'
      ' {Assembler style}'
      ' asm'
      '   MOV  AX, 1234H'
      '   MOV Number, AX'
      ' end;'
      'end;'
      ''
      'begin'
      '  if Flag then'
      '  begin'
      '    Do_;'
      '  end;'
      'end.'
    )
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Preprocessor'
      'Forward'
    )
    Gramma.Gramma = 'Skip = <Comment> | <Preprocessor>;'#10#10'// Class declaration'#10'ClassDecl = <Identifier> ''='' ''class'' InheritedList? <Identifier>;'#10'EmptyClass = <Identifier> ''='' "class" InheritedList '';'';'#10#10'// Generic'#10'ObjectDecl = <Identifier> ''='' "object"'#10'GenericDecl = "generic" <Identifier>'#10#10'// Interface declaration'#10'IntfDecl = <Identifier> ''='' ("interface" | "dispinterface") InheritedList? IntfNextToken;'#10'IntfNextToken = ''['' | <Identifier>; '#10#10'InheritedList = ''('' IdentList '')'';'#10'IdentList = <Identifier> ('','' <Identifier>)*;'#10
    CurrentLineStyle = 'Current Line'
    Extentions = 'pas inc dpr dpk lpr lpk p pp'
    LexerName = 'Pascal'
    Notes.Strings = (
      'Changed by Alexey'
    )
    LineComment = '//'
    Charset = DEFAULT_CHARSET
    AlwaysSyncBlockAnal = True
  end
  object SyntAnal90: TLibSyntAnalyzer
    Formats = <    
      item
        DisplayName = 'Comment'
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end    
      item
        DisplayName = 'String'
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
      end    
      item
        DisplayName = 'Number'
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end    
      item
        DisplayName = 'Symbol'
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
      end    
      item
        DisplayName = 'Id'
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
      end    
      item
        DisplayName = 'Id reserved'
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
      end    
      item
        DisplayName = 'Id func'
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
      end    
      item
        DisplayName = 'Id standard'
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier New'
      end>
    TokenRules = <    
      item
        DisplayName = 'CommLongBracket'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)-- \[\[ .*? (\]\] | \Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'CommLongBracket2'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)-- \[(=+)\[ .*? (\]\1\] | \Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Comm'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '--.*$'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'StrLongBracket'
        StyleName = 'String'
        TokenType = 4
        Expression = '(?s)\[\[ .*? (\]\] | \Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'StrLongBracket2'
        StyleName = 'String'
        TokenType = 4
        Expression = '(?s)\[(=+)\[ .*? (\]\1\] | \Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Str'
        StyleName = 'String'
        TokenType = 4
        Expression = '("|'')(\\"|\\''|.)*?(\1|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = '_IdFunc1'
        StyleName = 'Id func'
        TokenType = 10
        Expression = '[\w\.:]+(?=\s*=\s*function\s*\()'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = '_IdFunc2'
        StyleName = 'Id func'
        TokenType = 10
        Expression = '(?<=function\x20+)[\w\.:]+'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Id'
        StyleName = 'Id'
        TokenType = 2
        Expression = '[a-zA-Z_][\w\d]*'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Symb'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[\+\-/\*\(\)\[\]\{\}\<>\.,~!&\|;:=%\^\#]'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'NumHex'
        StyleName = 'Number'
        TokenType = 7
        Expression = '0x[A-Fa-f0-9]+'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'NumFlo'
        StyleName = 'Number'
        TokenType = 6
        Expression = '\d+(\.\d+)? e[\+\-]?\d+ | \d+\.\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Num'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <    
      item
        DisplayName = 'Id keyword'
        StyleName = 'Id reserved'
        BlockType = btTagDetect
        ConditionList = <        
          item
            TagList.Strings = (
              'and'
              'break'
              'do'
              'else'
              'elseif'
              'end'
              'false'
              'for'
              'function'
              'if'
              'in'
              'local'
              'nil'
              'not'
              'or'
              'repeat'
              'return'
              'then'
              'true'
              'until'
              'while'
            )
            TokenTypes = 4
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'Id std'
        StyleName = 'Id standard'
        BlockType = btTagDetect
        ConditionList = <        
          item
            TagList.Strings = (
              'abs'
              'acos'
              '_ALERT'
              'appendto'
              'asin'
              'assert'
              'atan'
              'atan2'
              'call'
              'ceil'
              'clock'
              'closefile'
              'collectgarbage'
              'coroutine'
              'cos'
              'date'
              'debug'
              'deg'
              'difftime'
              'dofile'
              'dostring'
              'error'
              '_ERRORMESSAGE'
              'execute'
              'exit'
              'exp'
              'floor'
              'flush'
              'foreach'
              'foreachi'
              'format'
              'frexp'
              '_G'
              'gcinfo'
              'getenv'
              'getfenv'
              'getmetatable'
              'getn'
              'globals'
              'gsub'
              '_INPUT'
              'io'
              'ipairs'
              'ldexp'
              'loadfile'
              'loadlib'
              'loadstring'
              'log'
              'log10'
              'math'
              'max'
              'min'
              'mod'
              'newtype'
              'next'
              'openfile'
              'os'
              '_OUTPUT'
              'pairs'
              'pcall'
              'print'
              '_PROMPT'
              'rad'
              'random'
              'randomseed'
              'rawegal'
              'rawget'
              'rawset'
              'read'
              'readfrom'
              'remove'
              'rename'
              'require'
              'seek'
              'setfenv'
              'setlocale'
              'setmetatable'
              'sin'
              'sort'
              'sqrt'
              '_STDERR'
              '_STDIN'
              '_STDOUT'
              'strbyte'
              'strchar'
              'strfind'
              'string'
              'strlen'
              'strlower'
              'strrep'
              'strsub'
              'strupper'
              'table'
              'tan'
              'time'
              'tinsert'
              'tmpfile'
              'tmpname'
              'tonumber'
              'tostring'
              'tremove'
              'type'
              'unpack'
              '_VERSION'
              'write'
              'writeto'
              'xpcall'
            )
            TokenTypes = 4
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'Block comment'
        BlockName = 'Block comment'
        NotParent = True
        AlwaysEnabled = True
        ConditionList = <        
          item
            TokenTypes = 2
          end>
        BlockEnd = 'Block comment end'
        EndOfTextClose = True
        DisplayInTree = False
        HighlightPos = cpBound
        CollapseFmt = '/* ... */'
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'Block comment end'
        BlockName = 'Block comment'
        StrictParent = True
        AlwaysEnabled = True
        BlockType = btRangeEnd
        ConditionList = <        
          item
            CondType = tcNotEqual
            TokenTypes = 2
          end>
        BlockOffset = 1
        HighlightPos = cpBound
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'func'
        ConditionList = <        
          item
            TokenTypes = 1024
          end>
        BlockEnd = 'end'
        HighlightPos = cpAny
        CancelNextRules = True
        DrawStaple = True
        NoEndRule = True
        TreeItemImage = 5
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'end'
        BlockType = btRangeEnd
        ConditionList = <        
          item
            TagList.Strings = (
              'end'
            )
            TokenTypes = 4
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'begin'
        ConditionList = <        
          item
            TagList.Strings = (
              'do'
              'function'
              'if'
            )
            TokenTypes = 4
          end>
        BlockEnd = 'end'
        DisplayInTree = False
        HighlightPos = cpAny
        DrawStaple = True
        CollapseFmt = '%sz0'
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'repeat'
        ConditionList = <        
          item
            TagList.Strings = (
              'repeat'
            )
            TokenTypes = 4
          end>
        BlockEnd = 'until'
        DisplayInTree = False
        HighlightPos = cpAny
        DrawStaple = True
        CollapseFmt = '%sz0'
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'until'
        BlockType = btRangeEnd
        ConditionList = <        
          item
            TagList.Strings = (
              'until'
            )
            TokenTypes = 4
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '--Str'
      '--test'
      '--test'
      ''
      ' s = ''ww\''ww'', "ww\"ww", ''alo\n123"'''
      ' a = [[alo'
      '  123]] test'
      ' a = [==['
      '  alo'
      '  123]==] test'
      ''
      ' n = 2 + 2.22 + 22.22e-2 + 0.22E1 '
      ' n = 0xF0'
      ''
      'function Set.mt.__lt (a,b)'
      '  return a <= b and not (b <= a)'
      'end'
      ''
      'function perm:app (a, n)'
      '  if n == 0 then'
      '    coroutine.yield(a)'
      '  else'
      '    for i=1,n do'
      '      -- put i-th element as the last one'
      '      a[n], a[i] = a[i], a[n]'
      ''
      '      -- generate all permutations of the other elements'
      '      permgen(a, n - 1)'
      ''
      '      -- restore i-th element'
      '      a[n], a[i] = a[i], a[n]'
      '    end'
      '  end'
      'end'
      ''
      'function perm (a)'
      '  local n = table.getn(a)'
      '  return coroutine.wrap(function () permgen(a, n) end)'
      'end'
      ''
      'function printResult (a)'
      '  for i,v in ipairs(a) do'
      '    io.write(v, " ")'
      '  end'
      '  io.write("\n")'
      'end'
      'repeat'
      '  print "aa"'
      'until true '
    )
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Preprocessor'
      'Func name'
    )
    Extentions = 'lua'
    LexerName = 'Lua'
    Notes.Strings = (
      'Alex (Synwrite)'
      'Ref: http://www.lua.org/manual/5.1/manual.html'
    )
    LineComment = '--'
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal101: TLibSyntAnalyzer
    Formats = <    
      item
        DisplayName = 'Symbol'
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end    
      item
        DisplayName = 'Number'
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end    
      item
        DisplayName = 'String'
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
      end    
      item
        DisplayName = 'Identifier'
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
      end    
      item
        DisplayName = 'Reserved word'
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
      end>
    TokenRules = <    
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '"(\\"|.)*?("|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Id'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = '(\d+ \.)? \d+ e [\+\-]? \d+ |  \d+ \. \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/\+\-\*:=<>&/\|\^\.,;!%~\^\?\{\}\[\]\(\)]'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <    
      item
        DisplayName = 'Keyw'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <        
          item
            TagList.Strings = (
              'false'
              'null'
              'true'
            )
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end    
      item
        DisplayName = '{'
        ConditionList = <        
          item
            TagList.Strings = (
              '{'
            )
            TokenTypes = 8
          end>
        BlockEnd = '}'
        EndOfTextClose = True
        NameFmt = '%s2~s0'
        HighlightPos = cpAny
        DrawStaple = True
        CollapseFmt = '%s2~s0'
        IgnoreAsParent = False
      end    
      item
        DisplayName = '}'
        BlockType = btRangeEnd
        ConditionList = <        
          item
            TagList.Strings = (
              '}'
            )
            TokenTypes = 8
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end    
      item
        DisplayName = '['
        ConditionList = <        
          item
            TagList.Strings = (
              '['
            )
            TokenTypes = 8
          end>
        BlockEnd = ']'
        EndOfTextClose = True
        NameFmt = '%s2~s0'
        HighlightPos = cpAny
        DrawStaple = True
        CollapseFmt = '%s2~s0'
        IgnoreAsParent = False
      end    
      item
        DisplayName = ']'
        BlockType = btRangeEnd
        ConditionList = <        
          item
            TagList.Strings = (
              ']'
            )
            TokenTypes = 8
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '{'
      '    "glossary": {'
      '        "title": "example glossary",'
      #9#9'"GlossDiv": {'
      '            "title": "S",'
      #9#9#9'"GlossList": {'
      '                "GlossEntry": {'
      '                    "ID": "SGML",'
      #9#9#9#9#9'"SortAs": "SGML",'
      #9#9#9#9#9'"GlossTerm": "Standard Generalized Markup Language",'
      #9#9#9#9#9'"GlossDef": {'
      '                        "para": "A meta-markup language, used to create markup languages such as DocBook.",'
      #9#9#9#9#9#9'"GlossSeeAlso": ["GML", "XML"]'
      '                    },'
      '                    "ArrayId": ['
      '                      {"id": "1"},'
      '                      {"id": "2", "Text": "TT"}'
      '                    ]                    '
      '                }'
      '            }'
      '        }'
      '    }'
      '}'
    )
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
    )
    Extentions = 'json sublime-settings sublime-menu'
    LexerName = 'JSON'
    Notes.Strings = (
      'Author: Alex, uvviewsoft.com'
      'Test'
      'http://json.org/example.html'
      'http://www.jquery4u.com/json/10-example-json-files/'
    )
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal67: TLibSyntAnalyzer
    Formats = <    
      item
        DisplayName = 'Heading'
        Font.Color = clMaroon
        Font.Height = -19
        Font.Name = 'Consolas'
        Font.Style = [fsBold]
        FormatType = ftCustomFont
      end    
      item
        DisplayName = 'Comment'
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
      end    
      item
        DisplayName = 'Quote'
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        BgColor = 12645824
      end    
      item
        DisplayName = 'Text'
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Consolas'
      end    
      item
        DisplayName = 'Codeblock'
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        BgColor = 15779980
      end    
      item
        DisplayName = 'Block'
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        BgColor = 15779980
      end    
      item
        DisplayName = 'Link'
        Font.Color = 3289830
        Font.Height = -13
        Font.Name = 'Courier New'
      end    
      item
        DisplayName = 'Image'
        Font.Color = 15086130
        Font.Height = -13
        Font.Name = 'Courier New'
      end    
      item
        DisplayName = 'Reference'
        Font.Color = 13030
        Font.Height = -13
        Font.Name = 'Courier New'
      end    
      item
        DisplayName = 'Footnote'
        Font.Color = 3277030
        Font.Height = -13
        Font.Name = 'Courier New'
      end    
      item
        DisplayName = 'HTML Code'
        Font.Color = 8404992
        Font.Height = -13
        Font.Name = 'Courier New'
      end    
      item
        DisplayName = 'Bold'
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end    
      item
        DisplayName = 'Italic'
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end    
      item
        DisplayName = 'Bold-Italic'
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold, fsItalic]
      end    
      item
        DisplayName = 'Definition'
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BgColor = 14737357
        BorderColorLeft = 16384
      end    
      item
        DisplayName = 'List'
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        BgColor = 16763594
      end    
      item
        DisplayName = 'Crossed out'
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsStrikeOut]
      end>
    TokenRules = <    
      item
        DisplayName = 'Bold-Italic'
        StyleName = 'Bold-Italic'
        TokenType = 1
        Expression = '(\*\*\*|___).*?(\*\*\*|___|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Bold'
        StyleName = 'Bold'
        TokenType = 1
        Expression = '(\*\*|__).*?(\*\*|__|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Italic'
        StyleName = 'Italic'
        TokenType = 1
        Expression = '(\*|_) \S.*? (\*|_|")'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Heading'
        StyleName = 'Heading'
        Expression = '^\#.* | .*\z--[-\x09\x20\|]* | .*\z=+'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 2
        Expression = '(?s)\<!--.*?--\>  | (?s)/\*.*?\*/'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Quote'
        StyleName = 'Quote'
        TokenType = 3
        Expression = '^>.*$'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'HTML pre'
        StyleName = 'Codeblock'
        TokenType = 4
        Expression = '(?s) <pre> .+? </pre>'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'HTML Code'
        StyleName = 'HTML Code'
        TokenType = 9
        Expression = '\&[^;]+\; | </?\w+>'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Link github'
        StyleName = 'Link'
        TokenType = 11
        Expression = '\[! \[ [^\]]+ \]\( [^\)]+ \) \] \( [^\)]+ \)'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Link usual'
        StyleName = 'Link'
        TokenType = 11
        Expression = '\[[^\]]+\]\([^\)]+\)'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Image'
        StyleName = 'Image'
        TokenType = 12
        Expression = '!\[[^\]]+\]\([^\)]+\)'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'List'
        StyleName = 'List'
        TokenType = 13
        Expression = '^[\x20\x09]*(\d{1,3}\.|[\-\+\*]\x20|[\(]?\w?[\.\)])| ^\(@[^\)]*\)'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Codeblock'
        StyleName = 'Codeblock'
        TokenType = 4
        Expression = '^(\x20{4,}|\x09{1,}).+$'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Footnote'
        StyleName = 'Footnote'
        TokenType = 7
        Expression = '^\[\^[^\]\^]+\]:.*?($|\z) | \[\^[^\]]+\]'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Reference'
        StyleName = 'Reference'
        TokenType = 6
        Expression = '^\[[^\]\^]+\]:.*?($|\z) | !? \[[^\]]+\]\[[^\]]*\] | \(@[^\)]*\)'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Definition'
        StyleName = 'Definition'
        TokenType = 10
        Expression = '^[\x20\t]*?.+(\z)+?*?^[\x20\t]*?:\ \ \'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Block'
        StyleName = 'Block'
        TokenType = 5
        Expression = '(?s)(^```|`).*?(^```|`)| (?s)^~~~.*?^~~~)'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Crossed Out'
        StyleName = 'Crossed out'
        TokenType = 1
        Expression = '(~~).*?(~~)'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Footnote Inline'
        StyleName = 'Footnote'
        TokenType = 7
        Expression = '\^\[.+?\]'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Link wiki'
        StyleName = 'Link'
        TokenType = 11
        Expression = '\[.+?\]'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Usual text'
        StyleName = 'Text'
        TokenType = 1
        Expression = '\w+'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <    
      item
        DisplayName = 'Header'
        ConditionList = <        
          item
            TokenTypes = 1
          end>
        EndOfTextClose = True
        NameFmt = '%s0'
        HighlightPos = cpBound
        CollapseFmt = '%s0'
        SelfClose = True
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '[![Test](link here)](link here)'
      ''
      '# Header'
      '<!-- This is a comment -->'
      '/* This, too */'
      ''
      '`get_prop` id "token_type"; optional `get_prop` param'
      ''
      '`Inline Code` inside a paragraph with *italic*, '
      '**bold** and ***bold italic***, [^footnote] and + '
      '[reference][ref]. <HTML> syntax and special &harr; '
      'chars are highlighted, [Hyperlink text](url "title") '
      'and ![alternative text](image adress "title"). '
      '~~Crossed out~~ is supported, too. '
      ''
      '~~~'
      'Codeblocks'
      '~~~'
      ''
      '    Codeblock by indention'
      ''
      #9'1. But not for numbered'
      #9'-  or unordered lists'
      '    '#9'+ with several indentions'
      '        '#9'* leading digit, + - * '
      '1. note: unordered needs a sign & blank'
      #9'(a) extended Pandoc interpretation is supported'
      '    '#9'i) with roman numbering (i)    '
      ''
      '(@) Pandoc Numbered example lists'
      '(@ref) with or without reference, where (@ref) is'
      'handled as reference'
      ''
      '> quoted text'
      ''
      'Definition lists'
      ':   In a single line'
      ''
      '    indented definition lists'
      ''
      #9':   paragraph (blank line between)'
      ''
      '[ref]: url "title"'
      '[^footnote]: this is a footnote *italic* '
      ''
      '/* Optional */'
      'header'
      '='
      ''
      '```'
      'codeblock'
      '```'
      '    '
      '    '
    )
    TokenTypeNames.Strings = (
      'Heading'
      'Text'
      'Comment'
      'Quote'
      'Codeblock'
      'Block'
      'Reference'
      'Footnote'
      'Footnote-Inline'
      'HTML Code'
      'Definition'
      'Link'
      'Image'
      'List'
    )
    Extentions = 'md markdown mkd'
    LexerName = 'Markdown'
    SkipSpaces = False
    Notes.Strings = (
      'Author: NoSi (v1.0 2014-01-20)'
      'Fixes: Alex (Synwrite) '
    )
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal16: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Id'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Id keyword'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Id keyword def'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Id function'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Id func name'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Id types'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Id exception'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clOlive
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Decorator'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = 51200
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end>
    TokenRules = <
      item
        DisplayName = '^Tree item'
        StyleName = 'Id keyword def'
        TokenType = 11
        Expression = '(def|class|async[\x20\x09]+def)\b'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = '^Keyword'
        StyleName = 'Id keyword'
        TokenType = 10
        Expression = 
          '(?<=^[\x20\x09]*) (if|else|elif|for|async\x20+for|while|try|exce' +
          'pt|finally|switch|case|with)\b'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String '#39#39#39
        StyleName = 'String'
        TokenType = 4
        Expression = '(?s)[rbuf]* ("""|'#39#39#39') .*? (\1|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String raw \ at eol'
        StyleName = 'String'
        TokenType = 4
        Expression = '(r|rf|rb|br|ur) ("|'#39') (\\\z|\\.|.)*? \2'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String \ at eol'
        StyleName = 'String'
        TokenType = 4
        Expression = '(b|u|f)? ("|'#39') (\\\z|\\.|.)*? \2'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String raw'
        StyleName = 'String'
        TokenType = 4
        Expression = '(r|rf|fr|rb|br|ur) ("|'#39') (\\.|.)*? (\2|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '(b|u|f)? ("|'#39') (\\.|.)*? (\2|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = '^Id='
        StyleName = 'Id'
        TokenType = 15
        Expression = '(?r)[a-z_]\w*(?=\x20*=)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Id func name'
        StyleName = 'Id func name'
        TokenType = 13
        Expression = '(?r)(?<=\bclass\x20+)\w+ |'#13#10'(?r)(?<=\bdef\x20+)\w+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Id after .'
        StyleName = 'Id'
        TokenType = 14
        Expression = '(?r)(?<=\.)[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = '^Id'
        StyleName = 'Id'
        TokenType = 2
        Expression = '(?r)[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = '^Symbol'
        StyleName = 'Symbol'
        TokenType = 8
        Expression = '[\(\)\[\]\{\}]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Int hex'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\b0x(_?[0-9a-f])+\b'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Int octal'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\b0o(_?[0-7])+\b'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Int bin'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\b0b(_?[01])+\b'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Int/float'
        StyleName = 'Number'
        TokenType = 5
        Expression = 
          '\b \d[_\d]* \.(\d[_\d]*)? (e[\-\+]?\d[_\d]*)?j? \b |'#13#10'\B\.\d[_\d' +
          ']* (e[\-\+]?\d[_\d]*)?j? \b |'#13#10'\b\d[_\d]*\.? ([Lj]\b)?'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '\#.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Ending :'
        StyleName = 'Symbol'
        TokenType = 12
        Expression = ':\x20*$ | :(?=\x20*\#.*$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/\*,\.;=<>\+\-\^!%\\\|~&]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol :'
        StyleName = 'Symbol'
        TokenType = 9
        Expression = ':'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Decorator'
        StyleName = 'Decorator'
        TokenType = 16
        Expression = '(?r)@\w[\w\.]*'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Keywords def'
        StyleName = 'Id keyword def'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'class'
              'def'
              'global'
              'lambda'
              'nonlocal')
            TokenTypes = 1540
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Keywords'
        StyleName = 'Id keyword'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'and'
              'as'
              'assert'
              'async'
              'await'
              'break'
              'continue'
              'del'
              'elif'
              'else'
              'except'
              'finally'
              'for'
              'from'
              'if'
              'import'
              'in'
              'is'
              'not'
              'or'
              'pass'
              'raise'
              'return'
              'try'
              'while'
              'with'
              'yield')
            TokenTypes = 516
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Functions'
        StyleName = 'Id function'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              '__future__'
              '__import__'
              'abs'
              'all'
              'any'
              'apply'
              'ascii'
              'bin'
              'buffer'
              'callable'
              'chr'
              'cmp'
              'coerce'
              'compile'
              'delattr'
              'dir'
              'divmod'
              'enumerate'
              'eval'
              'exec'
              'execfile'
              'file'
              'filter'
              'format'
              'getattr'
              'globals'
              'hasattr'
              'hash'
              'help'
              'hex'
              'id'
              'input'
              'intern'
              'isinstance'
              'issubclass'
              'iter'
              'len'
              'locals'
              'long'
              'max'
              'min'
              'next'
              'oct'
              'open'
              'ord'
              'pow'
              'print'
              'range'
              'raw_input'
              'reduce'
              'reload'
              'repr'
              'reversed'
              'round'
              'self'
              'setattr'
              'slice'
              'sorted'
              'sum'
              'unichr'
              'unicode'
              'vars'
              'xrange'
              'zip')
            TokenTypes = 516
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Type-related'
        StyleName = 'Id types'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'bool'
              'bytearray'
              'bytes'
              'classmethod'
              'complex'
              'dict'
              'Ellipsis'
              'False'
              'float'
              'frozenset'
              'int'
              'list'
              'map'
              'memoryview'
              'None'
              'NotImplemented'
              'object'
              'property'
              'set'
              'staticmethod'
              'str'
              'super'
              'True'
              'tuple'
              'type')
            TokenTypes = 516
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Exceptions'
        StyleName = 'Id exception'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'ArithmeticError'
              'AssertionError'
              'AttributeError'
              'BaseException'
              'BlockingIOError'
              'BrokenPipeError'
              'BufferError'
              'BytesWarning'
              'ChildProcessError'
              'ConnectionAbortedError'
              'ConnectionError'
              'ConnectionRefusedError'
              'ConnectionResetError'
              'DeprecationWarning'
              'EOFError'
              'Exception'
              'FileExistsError'
              'FileNotFoundError'
              'FloatingPointError'
              'FutureWarning'
              'GeneratorExit'
              'ImportError'
              'ImportWarning'
              'IndentationError'
              'IndexError'
              'InterruptedError'
              'IsADirectoryError'
              'KeyboardInterrupt'
              'KeyError'
              'LookupError'
              'MemoryError'
              'ModuleNotFoundError'
              'NameError'
              'NotADirectoryError'
              'NotImplementedError'
              'OSError'
              'OverflowError'
              'PendingDeprecationWarning'
              'PermissionError'
              'ProcessLookupError'
              'RecursionError'
              'ReferenceError'
              'ResourceWarning'
              'RuntimeError'
              'RuntimeWarning'
              'StopAsyncIteration'
              'StopIteration'
              'SyntaxError'
              'SyntaxWarning'
              'SystemError'
              'SystemExit'
              'TabError'
              'TimeoutError'
              'TypeError'
              'UnboundLocalError'
              'UnicodeDecodeError'
              'UnicodeEncodeError'
              'UnicodeError'
              'UnicodeTranslateError'
              'UnicodeWarning'
              'UserWarning'
              'ValueError'
              'Warning'
              'ZeroDivisionError')
            TokenTypes = 516
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Block comment'
        BlockName = 'Block comment'
        NotParent = True
        AlwaysEnabled = True
        ConditionList = <
          item
            TokenTypes = 8192
          end>
        BlockEnd = 'Block comment end'
        EndOfTextClose = True
        DisplayInTree = False
        HighlightPos = cpBound
        CollapseFmt = '{ ... }'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Block comment end'
        BlockName = 'Block comment'
        StrictParent = True
        AlwaysEnabled = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            CondType = tcNotEqual
            TokenTypes = 8192
          end>
        BlockOffset = 1
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'block for tree'
        ConditionList = <
          item
            TokenTypes = 4096
          end
          item
            CondType = tcSkip
            TokenTypes = 59390
          end
          item
            TokenTypes = 2048
          end>
        EndOfTextClose = True
        NameFmt = '%s0 %s-1'
        RefToCondEnd = True
        HighlightPos = cpAny
        CancelNextRules = True
        DrawStaple = True
        GroupIndex = 20
        CollapseFmt = '%s0 %s-1...'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'block for tree (ex)'
        ConditionList = <
          item
            TokenTypes = 4096
          end
          item
            CondType = tcSkip
            TokenTypes = 59390
          end
          item
            TokenTypes = 2048
          end>
        EndOfTextClose = True
        NameFmt = '%sz0'
        RefToCondEnd = True
        HighlightPos = cpAny
        CancelNextRules = True
        DrawStaple = True
        GroupIndex = 20
        CollapseFmt = '%s0 %s-1...'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'block not for tree'
        ConditionList = <
          item
            TokenTypes = 4096
          end
          item
            CondType = tcSkip
            TokenTypes = 59390
          end
          item
            TokenTypes = 1024
          end>
        EndOfTextClose = True
        DisplayInTree = False
        RefToCondEnd = True
        HighlightPos = cpAny
        CancelNextRules = True
        DrawStaple = True
        GroupIndex = 20
        CollapseFmt = '%sz0 ...'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'import'
        ConditionList = <
          item
            TagList.Strings = (
              'from'
              'import')
            TokenTypes = 512
          end>
        NameFmt = '%sz0'
        GroupFmt = '\imports'
        RefToCondEnd = True
        HighlightPos = cpAny
        NoEndRule = True
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '#comment'
      'test = u"""doc'
      'string""" + r"""doc'
      'string""" + "long \'
      'string"; #end'
      '11_22_3.44_5 + 0x_FF_aa_b_0 + 0b10_1_0'
      '+ 3. + .3 + 3.0 + 1.2e-3'
      ''
      'import sys, sys2, sys3'
      'from csv import aa, bb'
      'str = r'#39'\test\test'#39' + u'#39'test'#39' + r"\test"'
      'func = lambda x: x'
      ''
      'def func(num):      #cmt  '
      '    for n in range(len(sys.argv)):'
      '      print("Arg %s" % s)'
      '      if n>2:'
      '        return True'
      '    return False'
      '    '
      'async def get_json(client, url):  '
      '    async with client.get(url) as response:'
      '        assert test = {'#39'aa'#39': 2, '#39'bb'#39': None}'
      '        return await response.read()'
      ''
      'class MyName(object):      '
      '  @Decor.name('#39'test'#39')'
      '  def func1(num):'
      '    pass'
      '   '
      'MyName().func1(num)')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      '^Id'
      'Symbol'
      '^String'
      'Number'
      'Number2'
      '^Comment'
      '^Symbol'
      'Usual :'
      '^Id keyword'
      '^Id tree'
      'Ending :'
      'Id func name'
      'Id after .'
      '^Id='
      '^@Id')
    Extentions = 'py pyw rpy cpy sconstruct pyi'
    LexerName = 'Python'
    Notes.Strings = (
      'Python lexer by Alexey (CudaText)')
    RestartFromLineStart = True
    LineComment = '#'
    Charset = DEFAULT_CHARSET
    Left = 144
    Top = 184
  end
  object SyntAnal5: TLibSyntAnalyzer
    Formats = <    
      item
        DisplayName = 'Comment'
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end    
      item
        DisplayName = 'Shebang'
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end    
      item
        DisplayName = 'Var'
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
      end    
      item
        DisplayName = 'String'
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
      end    
      item
        DisplayName = 'Number'
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end    
      item
        DisplayName = 'Id'
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
      end    
      item
        DisplayName = 'Keywords'
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier New'
      end    
      item
        DisplayName = 'Symbol'
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end>
    TokenRules = <    
      item
        DisplayName = 'Shebang'
        StyleName = 'Shebang'
        Expression = '\#!.*$'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '\#[\s\#\-].*$ | \#\z'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Var'
        StyleName = 'Var'
        TokenType = 2
        Expression = '[$@%][$]?[a-zA-Z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '("|'') (\\\1|.)*? \1'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Id'
        StyleName = 'Id'
        TokenType = 2
        Expression = '[a-zA-Z_]\w* (::\w+)?'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[\+\-/\*\(\)\[\]\{\}\<>\.,~!&\|;:=%\^\#\\]'
        ColumnFrom = 0
        ColumnTo = 0
      end    
      item
        DisplayName = 'Number'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+(\.\d+)?'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <    
      item
        DisplayName = 'Keywords'
        StyleName = 'Keywords'
        BlockType = btTagDetect
        ConditionList = <        
          item
            TagList.Strings = (
              'after'
              'append'
              'apply'
              'argc'
              'argv'
              'argv0'
              'array'
              'auto_execok'
              'auto_import'
              'auto_load'
              'auto_mkindex'
              'auto_path'
              'auto_qualify'
              'auto_reset'
              'bell'
              'bgerror'
              'binary'
              'bind'
              'bindtags'
              'bitmap'
              'break'
              'busy'
              'button'
              'canvas'
              'catch'
              'cd'
              'chan'
              'checkbutton'
              'clipboard'
              'clock'
              'close'
              'colors'
              'concat'
              'console'
              'constructor'
              'continue'
              'coroutine'
              'cursors'
              'dde'
              'destroy'
              'destructor'
              'dict'
              'encoding'
              'entry'
              'env'
              'eof'
              'error'
              'errorCode'
              'errorInfo'
              'eval'
              'event'
              'exec'
              'exit'
              'expr'
              'fblocked'
              'fconfigure'
              'fcopy'
              'file'
              'fileevent'
              'filename'
              'flush'
              'focus'
              'font'
              'fontchooser'
              'for'
              'foreach'
              'format'
              'frame'
              'geometry'
              'gets'
              'glob'
              'global'
              'grab'
              'grid'
              'history'
              'http'
              'if'
              'image'
              'incr'
              'info'
              'interp'
              'join'
              'keysyms'
              'label'
              'labelframe'
              'lappend'
              'lassign'
              'lindex'
              'linsert'
              'list'
              'listbox'
              'llength'
              'lmap'
              'load'
              'lower'
              'lrange'
              'lrepeat'
              'lreplace'
              'lreverse'
              'lsearch'
              'lset'
              'lsort'
              'mathfunc'
              'mathop'
              'memory'
              'menu'
              'menubutton'
              'message'
              'method'
              'msgcat'
              'my'
              'namespace'
              'next'
              'nextto'
              'oo::class'
              'oo::copy'
              'oo::define'
              'oo::objdefine'
              'oo::object'
              'open'
              'option'
              'options'
              'pack'
              'package'
              'panedwindow'
              'parray'
              'photo'
              'pid'
              'pkg::create'
              'pkg_mkIndex'
              'place'
              'platform'
              'platform::shell'
              'proc'
              'puts'
              'pwd'
              'radiobutton'
              'raise'
              'read'
              'refchan'
              'regexp'
              'registry'
              'regsub'
              'rename'
              're_syntax'
              'return'
              'safe'
              'safe::loadTk'
              'scale'
              'scan'
              'scrollbar'
              'seek'
              'selection'
              'self'
              'send'
              'set'
              'socket'
              'source'
              'spinbox'
              'split'
              'string'
              'subst'
              'switch'
              'tailcall'
              'Tcl'
              'tcl_endOfWord'
              'tcl_findLibrary'
              'tcl_interactive'
              'tcl_library'
              'tcl_nonwordchars'
              'tcl_patchLevel'
              'tcl_pkgPath'
              'tcl_platform'
              'tcl_precision'
              'tcl::prefix'
              'tcl_rcFileName'
              'tcl_startOfNextWord'
              'tcl_startOfPreviousWord'
              'tcltest'
              'tcl_traceCompile'
              'tcl_traceExec'
              'tcl_version'
              'tcl_wordBreakAfter'
              'tcl_wordBreakBefore'
              'tcl_wordchars'
              'tell'
              'text'
              'throw'
              'time'
              'tk'
              'tk_bisque'
              'tk_chooseColor'
              'tk_chooseDirectory'
              'tk_dialog'
              'tkerror'
              'tk_focusFollowsMouse'
              'tk_focusNext'
              'tk_focusPrev'
              'tk_getOpenFile'
              'tk_getSaveFile'
              'tk_library'
              'tk::mac'
              'tk_menuSetFocus'
              'tk_messageBox'
              'tk_optionMenu'
              'tk_patchLevel'
              'tk_popup'
              'tk_setPalette'
              'tk_strictMotif'
              'tk_textCopy'
              'tk_textCut'
              'tk_textPaste'
              'tk_version'
              'tkwait'
              'tm'
              'toplevel'
              'trace'
              'transchan'
              'try'
              'ttk::button'
              'ttk::checkbutton'
              'ttk::combobox'
              'ttk::entry'
              'ttk::frame'
              'ttk_image'
              'ttk::intro'
              'ttk::label'
              'ttk::labelframe'
              'ttk::menubutton'
              'ttk::notebook'
              'ttk::panedwindow'
              'ttk::progressbar'
              'ttk::radiobutton'
              'ttk::scale'
              'ttk::scrollbar'
              'ttk::separator'
              'ttk::sizegrip'
              'ttk::spinbox'
              'ttk::style'
              'ttk::treeview'
              'ttk_vsapi'
              'ttk::widget'
              'unknown'
              'unload'
              'unset'
              'update'
              'uplevel'
              'upvar'
              'variable'
              'vwait'
              'while'
              'winfo'
              'wm'
              'yield'
              'yieldto'
              'zlib'
            )
            TokenTypes = 4
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end    
      item
        DisplayName = '{'
        ConditionList = <        
          item
            TagList.Strings = (
              '{'
            )
            TokenTypes = 8
          end>
        BlockEnd = '}'
        DisplayInTree = False
        HighlightPos = cpAny
        DrawStaple = True
        IgnoreAsParent = False
      end    
      item
        DisplayName = '}'
        BlockType = btRangeEnd
        ConditionList = <        
          item
            TagList.Strings = (
              '}'
            )
            TokenTypes = 8
          end>
        BlockEnd = '{'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end    
      item
        DisplayName = 'proc'
        ConditionList = <        
          item
            TagList.Strings = (
              'constructor'
              'destructor'
              'method'
              'oo::class'
              'proc'
            )
            TokenTypes = 4
          end>
        NameFmt = '%sz0'
        RefToCondEnd = True
        HighlightPos = cpAny
        NoEndRule = True
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '#!/usr/bin/env tclsh'
      '# Example code'
      'set example {1 2 3}'
      'e.g. {set''add example 4} -> {1 2 3 4}'
      'e.g. {set''add example 4} -> {1 2 3 4}'
      'book open "name \"substr\""'
      'proc set''remove {_set args} {'
      '   upvar 1 $_set set'
      '   foreach el $args {'
      '       set pos [lsearch -exact $set $el]'
      '   }'
      '}'
    )
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Id'
      'Symbol'
      'String'
      'Number'
    )
    Extentions = 'tcl tk tm'
    LexerName = 'Tcl'
    SkipSpaces = False
    Notes.Strings = (
      'Author: Matthias030 (SynWrite site admin)'
      'Improvements: Alex (SynWrite)'
      ''
      'Ref:'
      'http://www.tcl.tk/man/'
      'Not tested but maybe a good idea to test on:'
      'http://www.subdude-site.com/WebPages_Local/RefInfo/Computer/TclTk/others_tcltkCode/others_tcltkCode.htm'
    )
    LineComment = '# '
    Charset = DEFAULT_CHARSET
  end
end
